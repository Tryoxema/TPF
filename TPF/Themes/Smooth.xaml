<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tpf="clr-namespace:TPF.Controls"
                    xmlns:tabControl="clr-namespace:TPF.Controls.Specialized.TabControl">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/TPF;component/Themes/Generic.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--Brushes-->
    <SolidColorBrush Color="#CECECE" x:Key="OverlayBrush"/>

    <!--Default WPF Controls-->
    <!-- ==================== ToolTip ==================== -->
    <Style TargetType="ToolTip" x:Key="WPF.ToolTipStyle">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="6 4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tpf:BorderElement.CornerRadius)}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== Label ==================== -->
    <Style TargetType="Label" x:Key="WPF.LabelStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="Content" RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== Button ==================== -->
    <Style TargetType="Button" x:Key="WPF.ButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== RepeatButton ==================== -->
    <Style TargetType="RepeatButton" x:Key="WPF.RepeatButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== ToggleButton ==================== -->
    <Style TargetType="ToggleButton" x:Key="WPF.ToggleButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="Background" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Background" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== CheckBox ==================== -->
    <Style TargetType="CheckBox" x:Key="WPF.CheckBoxStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="5 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <tpf:SimplePanel Margin="1" Width="16" Height="16">
                            <Border x:Name="BackgroundBorder" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                                                    CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=CheckBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                            <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=CheckBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                            <Path x:Name="Checkmark" Width="9" Height="7" Data="M0,3 L3,6 7,0" Stretch="Fill" StrokeThickness="1.5" Stroke="{tpf:ResourceLink Key=SelectedTextBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"/>
                            <Rectangle x:Name="IndeterminateVisual" Width="8" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{tpf:ResourceLink Key=TextBrush}" Visibility="Collapsed"/>
                        </tpf:SimplePanel>

                        <ContentPresenter x:Name="Content" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="true" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="Checkmark" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="IndeterminateVisual" Value="Collapsed"/>
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" TargetName="Checkmark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="IndeterminateVisual" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Checkmark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="IndeterminateVisual" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="BackgroundBorder" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== TextBox ==================== -->
    <Style TargetType="TextBox" x:Key="WPF.TextBoxStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ScrollViewer Name="PART_ContentHost" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Focusable="False"
                                          BorderThickness="0" Padding="{TemplateBinding Padding}"/>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== PasswordBox ==================== -->
    <Style TargetType="PasswordBox" x:Key="WPF.PasswordBoxStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=PasswordBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=PasswordBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=PasswordBox}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ScrollViewer Name="PART_ContentHost" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Focusable="False"
                                          BorderThickness="0" Padding="{TemplateBinding Padding}"/>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== ScrollBar ==================== -->
    <Style TargetType="RepeatButton" x:Key="WPF.ScrollBarRepeatButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=ScrollBarBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Value="{tpf:ResourceLink Key=ScrollBarMouseOverBrush}" Property="Foreground"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Value="{tpf:ResourceLink Key=ScrollBarPressedBrush}" Property="Foreground"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="0.4" Property="Opacity"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate TargetType="Thumb" x:Key="WPF.ScrollBarThumbTemplate">
        <tpf:SimplePanel Background="Transparent">
            <Rectangle Name="Bar" RadiusX="3" RadiusY="3" SnapsToDevicePixels="True" Fill="{tpf:ResourceLink Key=ScrollBarBrush}"/>
        </tpf:SimplePanel>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Bar" Value="{tpf:ResourceLink Key=ScrollBarMouseOverBrush}" Property="Fill"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter TargetName="Bar" Value="{tpf:ResourceLink Key=ScrollBarPressedBrush}" Property="Fill"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Bar" Value="0.4" Property="Opacity"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="Thumb" x:Key="WPF.ScrollBarHorizontalThumbStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="0 3"/>
        <Setter Property="Template" Value="{StaticResource WPF.ScrollBarThumbTemplate}"/>
    </Style>
    <Style TargetType="Thumb" x:Key="WPF.ScrollBarVerticalThumbStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="3 0"/>
        <Setter Property="Template" Value="{StaticResource WPF.ScrollBarThumbTemplate}"/>
    </Style>
    <ControlTemplate TargetType="ScrollBar" x:Key="WPF.ScrollBarHorizontalTemplate">
        <Grid UseLayoutRounding="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Border Grid.ColumnSpan="3" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>
            <RepeatButton Grid.Column="0" Width="12" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.LineLeftCommand}">
                <Path Width="5" Height="6" Data="M0,3 L4,0 5,0 5,6 4,6 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"
                      Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>

            <Track Name="PART_Track" Grid.Column="1" Orientation="Horizontal">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource WPF.ScrollBarHorizontalThumbStyle}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.PageRightCommand}"/>
                </Track.IncreaseRepeatButton>
            </Track>

            <RepeatButton Grid.Column="2" Width="12" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.LineRightCommand}">
                <Path Width="5" Height="6" Data="M0,0 L0,6 1,6 5,3 1,0 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"
                      Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <ControlTemplate TargetType="ScrollBar" x:Key="WPF.ScrollBarVerticalTemplate">
        <Grid UseLayoutRounding="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Border Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>
            <RepeatButton Grid.Row="0" Height="12" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.LineUpCommand}">
                <Path Margin="0 0 0 0" Width="6" Height="5" Data="M0,5 L0,4 3,0 6,4 6,5 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"
                      Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>

            <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.PageUpCommand}"/>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource WPF.ScrollBarVerticalThumbStyle}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.PageDownCommand}"/>
                </Track.IncreaseRepeatButton>
            </Track>

            <RepeatButton Grid.Row="2" Height="12" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.LineDownCommand}">
                <Path Width="6" Height="5" Data="M0,0 L6,0 6,1 3,5 0,1 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"
                      Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <Style TargetType="ScrollBar" x:Key="WPF.ScrollBarStyle">
        <Setter Property="MinWidth" Value="12"/>
        <Setter Property="MinHeight" Value="12"/>
        <Setter Property="Width" Value="12"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=ScrollBarBackgroundBrush}"/>
        <Setter Property="Template" Value="{StaticResource WPF.ScrollBarVerticalTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Template" Value="{StaticResource WPF.ScrollBarHorizontalTemplate}"/>
                <Setter Property="Height" Value="12"/>
                <Setter Property="Width" Value="Auto"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ScrollViewer" x:Key="WPF.ScrollViewerStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <ScrollContentPresenter Name="PART_ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}"
                                                    CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                            <Border Grid.Row="1" Grid.ColumnSpan="2" Background="{tpf:ResourceLink Key=ScrollBarBackgroundBrush}"/>
                            <ScrollBar Name="PART_VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Grid.Row="0" Style="{StaticResource WPF.ScrollBarStyle}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding VerticalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ScrollBar Name="PART_HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" Style="{StaticResource WPF.ScrollBarStyle}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== Expander ==================== -->
    <ControlTemplate TargetType="ToggleButton" x:Key="WPF.ExpanderDownHeaderTemplate">
        <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="19"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Ellipse x:Name="Border" Width="19" Height="19" Stroke="{tpf:ResourceLink Key=BorderBrush}" Fill="{tpf:ResourceLink Key=PrimaryBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Ellipse x:Name="Overlay" Width="19" Height="19" Stroke="Transparent" Fill="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Path x:Name="Arrow" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                <ContentPresenter Grid.Column="1" Margin="4 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 L8,4.5"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="ToggleButton" x:Key="WPF.ExpanderUpHeaderTemplate">
        <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="19"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <tpf:SimplePanel RenderTransformOrigin="0.5 0.5">
                    <tpf:SimplePanel.RenderTransform>
                        <RotateTransform Angle="180"/>
                    </tpf:SimplePanel.RenderTransform>

                    <Ellipse x:Name="Border" Width="19" Height="19" Stroke="{tpf:ResourceLink Key=BorderBrush}" Fill="{tpf:ResourceLink Key=PrimaryBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Ellipse x:Name="Overlay" Width="19" Height="19" Stroke="Transparent" Fill="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </tpf:SimplePanel>

                <ContentPresenter Grid.Column="1" Margin="4 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 L8,4.5"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="ToggleButton" x:Key="WPF.ExpanderLeftHeaderTemplate">
        <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.RowDefinitions>
                    <RowDefinition Height="19"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <tpf:SimplePanel RenderTransformOrigin="0.5 0.5">
                    <tpf:SimplePanel.RenderTransform>
                        <RotateTransform Angle="90"/>
                    </tpf:SimplePanel.RenderTransform>

                    <Ellipse x:Name="Border" Width="19" Height="19" Stroke="{tpf:ResourceLink Key=BorderBrush}" Fill="{tpf:ResourceLink Key=PrimaryBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Ellipse x:Name="Overlay" Width="19" Height="19" Stroke="Transparent" Fill="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </tpf:SimplePanel>

                <ContentPresenter Grid.Row="1" Margin="0 4 0 0" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 L8,4.5"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="ToggleButton" x:Key="WPF.ExpanderRightHeaderTemplate">
        <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.RowDefinitions>
                    <RowDefinition Height="19"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <tpf:SimplePanel RenderTransformOrigin="0.5 0.5">
                    <tpf:SimplePanel.RenderTransform>
                        <RotateTransform Angle="-90"/>
                    </tpf:SimplePanel.RenderTransform>

                    <Ellipse x:Name="Border" Width="19" Height="19" Stroke="{tpf:ResourceLink Key=BorderBrush}" Fill="{tpf:ResourceLink Key=PrimaryBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Ellipse x:Name="Overlay" Width="19" Height="19" Stroke="Transparent" Fill="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </tpf:SimplePanel>

                <ContentPresenter Grid.Row="1" Margin="0 4 0 0" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 L8,4.5"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="Expander" x:Key="WPF.ExpanderStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="True">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderButton" DockPanel.Dock="Top" Margin="1" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          Template="{StaticResource WPF.ExpanderDownHeaderTemplate}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}"
                                          Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandContent" DockPanel.Dock="Bottom" Visibility="Collapsed" Focusable="False" Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter TargetName="ExpandContent" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandContent" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderButton" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderButton" Property="Template" Value="{StaticResource WPF.ExpanderRightHeaderTemplate}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandContent" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="HeaderButton" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="HeaderButton" Property="Template" Value="{StaticResource WPF.ExpanderUpHeaderTemplate}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandContent" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderButton" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderButton" Property="Template" Value="{StaticResource WPF.ExpanderLeftHeaderTemplate}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HeaderButton" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== ListBoxItem ==================== -->
    <Style TargetType="ListBoxItem" x:Key="WPF.ListBoxItemStyle">
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5 2"/>
        <Setter Property="Margin" Value="0 1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <tpf:SimplePanel>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <Border x:Name="Selector" Width="3" Background="{tpf:ResourceLink Key=SelectedBrush}" HorizontalAlignment="Left" Visibility="Collapsed" IsHitTestVisible="False"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=(tpf:BorderElement.CornerRadius), Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=#\,0\,0\,#}"/>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                            <Setter TargetName="Selector" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ==================== ListBox ==================== -->
    <Style TargetType="ListBox" x:Key="WPF.ListBoxStyle">
        <Setter Property="ItemContainerStyle" Value="{StaticResource WPF.ListBoxItemStyle}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(tpf:BorderElement.CornerRadius)}">
                        <ScrollViewer Margin="0" BorderThickness="0" Padding="{TemplateBinding Padding}"
                                      HorizontalScrollBarVisibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(ScrollViewer.HorizontalScrollBarVisibility)}"
                                      VerticalScrollBarVisibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(ScrollViewer.VerticalScrollBarVisibility)}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== TabControl ==================== -->
    <Style TargetType="ScrollViewer" x:Key="WPF.TabControlScrollViewerStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid Name="HeaderPanel">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <RepeatButton Name="UpButton" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Height="14" Grid.Row="0" Grid.Column="1" Command="ScrollBar.LineUpCommand" Visibility="Collapsed">
                            <Path Data="M0,5 L0,4 3,0 6,4 6,5 z" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Fill="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"
                                  Stroke="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"/>
                        </RepeatButton>
                        <RepeatButton Name="LeftButton" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Width="14" Grid.Row="1" Grid.Column="0" Command="ScrollBar.LineLeftCommand" Visibility="Collapsed">
                            <Path Data="M0,3 L4,0 5,0 5,6 4,6 z" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Fill="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"
                                  Stroke="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"/>
                        </RepeatButton>

                        <ScrollContentPresenter Grid.Row="1" Grid.Column="1"/>

                        <RepeatButton Name="RightButton" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Width="14" Grid.Row="1" Grid.Column="2" Command="ScrollBar.LineRightCommand" Visibility="Collapsed">
                            <Path Data="M0,0 L0,6 1,6 5,3 1,0 z" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Fill="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"
                                  Stroke="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"/>
                        </RepeatButton>
                        <RepeatButton Name="DownButton" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Height="14" Grid.Row="2" Grid.Column="1" Command="ScrollBar.LineDownCommand" Visibility="Collapsed">
                            <Path Data="M0,0 L6,0 6,1 3,5 0,1 z" VerticalAlignment="Center" HorizontalAlignment="Center"
                                  Fill="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"
                                  Stroke="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComputedHorizontalScrollBarVisibility" Value="Visible">
                            <Setter TargetName="LeftButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RightButton" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ComputedVerticalScrollBarVisibility" Value="Visible">
                            <Setter TargetName="UpButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="DownButton" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TabControl" x:Key="WPF.TabControlStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid x:Name="RootGrid" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>

                        <ScrollViewer x:Name="HeaderPanel" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0"
                                      HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Style="{StaticResource WPF.TabControlScrollViewerStyle}">
                            <TabPanel IsItemsHost="True" Background="Transparent" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        </ScrollViewer>

                        <Border x:Name="ContentPanel" Grid.Row="1" Grid.Column="0"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0 0 0 2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0 0 0 0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0 0 0 0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="RootGrid" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ==================== TabItem ==================== -->
    <Style TargetType="TabItem" x:Key="WPF.TabItemStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="10 0"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="MinWidth" Value="26"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <tpf:SimplePanel x:Name="Panel">
                        <Border x:Name="Background" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter x:Name="HeaderContent" ContentSource="Header" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <Border x:Name="SelectedVisual" Height="3" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"
                                RenderTransformOrigin="0.5 0.5" Background="{tpf:ResourceLink Key=SelectedBrush}">
                            <Border.RenderTransform>
                                <ScaleTransform ScaleX="0" ScaleY="1"/>
                            </Border.RenderTransform>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HeaderContent" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="SelectedVisual">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="1">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <QuinticEase EasingMode="EaseIn"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="SelectedVisual">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseOut"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger SourceName="Panel" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ==================== GridSplitter ==================== -->
    <Style TargetType="GridSplitter" BasedOn="{StaticResource WPF.GridSplitterStyle}" x:Key="WPF.GridSplitterStyle">
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
    </Style>

    <!--TPF Controls-->
    <!-- ==================== Card ==================== -->
    <Style TargetType="tpf:Card" BasedOn="{StaticResource TPF.CardStyle}" x:Key="TPF.CardStyle">
        <Setter Property="CornerRadius" Value="4"/>
    </Style>
    <Style TargetType="tpf:Card" BasedOn="{StaticResource TPF.CardStyle}"/>

    <!-- ==================== Shield ==================== -->
    <Style TargetType="tpf:Shield" BasedOn="{StaticResource TPF.ShieldStyle}" x:Key="TPF.ShieldStyle">
        <Setter Property="CornerRadius" Value="4"/>
    </Style>
    <Style TargetType="tpf:Shield" BasedOn="{StaticResource TPF.ShieldStyle}"/>

    <!-- ==================== Button ==================== -->
    <Style TargetType="tpf:Button" x:Key="TPF.ButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Button">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Button" BasedOn="{StaticResource TPF.ButtonStyle}"/>

    <!-- ==================== ToggleSwitchButton ==================== -->
    <Style TargetType="tpf:ToggleSwitchButton" x:Key="TPF.ToggleSwitchButtonStyle">
        <Setter Property="Height" Value="20"/>
        <Setter Property="TrackHeight" Value="20"/>
        <Setter Property="TrackWidth" Value="50"/>
        <Setter Property="SwitchHeight" Value="20"/>
        <Setter Property="SwitchWidth" Value="20"/>
        <Setter Property="Padding" Value="5 0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ToggleSwitchButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ContentPresenter x:Name="UncheckedContentPresenter" ContentSource="UncheckedContent" Grid.Column="0" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                        <tpf:SimplePanel SnapsToDevicePixels="True" Grid.Column="1">
                            <Border x:Name="TrackBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Height="{TemplateBinding TrackHeight}" Width="{TemplateBinding TrackWidth}" CornerRadius="8"/>
                            <Border x:Name="CheckedTrackBackground" Background="{tpf:ResourceLink Key=SelectedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Height="{TemplateBinding TrackHeight}" Width="{TemplateBinding TrackWidth}" Opacity="0" CornerRadius="8"/>
                            <Rectangle x:Name="AnimationHelper" Visibility="Collapsed" MinWidth="0"/>
                            <Ellipse x:Name="Switch" StrokeThickness="{TemplateBinding BorderThickness}" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}"
                                       HorizontalAlignment="Left" Height="{TemplateBinding SwitchHeight}" Width="{TemplateBinding SwitchWidth}" RenderTransformOrigin="0.5,0.5">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform Y="0">
                                        <TranslateTransform.X>
                                            <MultiBinding Converter="{StaticResource ToggleSwitchPositionConverter}">
                                                <Binding Path="MinWidth" ElementName="AnimationHelper"/>
                                                <Binding Path="TrackWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                <Binding Path="SwitchWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            </MultiBinding>
                                        </TranslateTransform.X>
                                    </TranslateTransform>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </tpf:SimplePanel>

                        <ContentPresenter x:Name="CheckedContentPresenter" ContentSource="CheckedContent" Grid.Column="2" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Switch" Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Switch" Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimationHelper" Storyboard.TargetProperty="MinWidth">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedTrackBackground" Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimationHelper" Storyboard.TargetProperty="MinWidth">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedTrackBackground" Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="ContentPosition" Value="Both">
                            <Setter TargetName="UncheckedContentPresenter" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Grid.Column" Value="2"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ContentPosition" Value="Left">
                            <Setter TargetName="UncheckedContentPresenter" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Grid.Column" Value="0"/>
                        </Trigger>
                        <Trigger Property="ContentPosition" Value="Right">
                            <Setter TargetName="UncheckedContentPresenter" Property="Grid.Column" Value="2"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Grid.Column" Value="2"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ContentPosition" Value="Left"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ContentPosition" Value="Right"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ContentPosition" Value="Left"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ContentPosition" Value="Right"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ToggleSwitchButton" BasedOn="{StaticResource TPF.ToggleSwitchButtonStyle}"/>

    <!-- ==================== PathButton ==================== -->
    <Style TargetType="tpf:PathButton" x:Key="TPF.PathButtonStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Stroke" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="Fill" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:PathButton">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                            <Grid Margin="{TemplateBinding Padding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Path x:Name="Path" Grid.Column="0" Data="{TemplateBinding Data}" Stroke="{TemplateBinding Stroke}" Fill="{TemplateBinding Fill}"
                                      Stretch="{TemplateBinding Stretch}" StrokeThickness="{TemplateBinding StrokeThickness}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <ContentPresenter x:Name="Content" Grid.Column="1" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </tpf:SimplePanel>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Path" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:PathButton" BasedOn="{StaticResource TPF.PathButtonStyle}"/>

    <!-- ==================== DropDownButton ==================== -->
    <Style TargetType="tpf:DropDownButton" x:Key="TPF.DropDownButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="DropDownForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="DropDownBackground" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="DropDownBorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:DropDownButton">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter x:Name="Content" Grid.Column="0" TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" RecognizesAccessKey="True"/>
                                <Path x:Name="Symbol" Data="M0,0 L5,5 10,0 9.5,-0.5 5,4 0.5,-0.5 z" Fill="{tpf:ResourceLink Key=GlyphBrush}" Visibility="{TemplateBinding DropDownArrowVisibility}" 
                                      IsHitTestVisible="False" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5 0"/>
                            </Grid>
                        </Border>
                        <Popup IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                            <Border BorderThickness="1" BorderBrush="{TemplateBinding DropDownBorderBrush}" Background="{TemplateBinding DropDownBackground}" CornerRadius="{TemplateBinding CornerRadius}"
                                    MinWidth="{TemplateBinding DropDownMinWidth}" MinHeight="{TemplateBinding DropDownMinHeight}" 
                                    Width="{TemplateBinding DropDownWidth}" Height="{TemplateBinding DropDownHeight}"
                                    MaxWidth="{TemplateBinding DropDownMaxWidth}" MaxHeight="{TemplateBinding DropDownMaxHeight}">
                                <ContentControl Content="{TemplateBinding DropDownContent}" ContentTemplate="{TemplateBinding DropDownContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                Foreground="{TemplateBinding DropDownForeground}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            </Border>
                        </Popup>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:DropDownButton" BasedOn="{StaticResource TPF.DropDownButtonStyle}"/>

    <!-- ==================== SplitButton ==================== -->
    <Style TargetType="tpf:SplitButton" x:Key="TPF.SplitButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="DropDownForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="DropDownBackground" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="DropDownBorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="ButtonStyle" Value="{StaticResource WPF.ButtonStyle}"/>
        <Setter Property="ToggleButtonStyle" Value="{StaticResource WPF.ToggleButtonStyle}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:SplitButton">
                    <tpf:SimplePanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Button x:Name="PART_Button" Grid.Column="0" IsTabStop="False" Focusable="False" Padding="{TemplateBinding Padding}" Style="{TemplateBinding ButtonStyle}"
                                    Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    tpf:BorderElement.CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=#\,0\,0\,#}"
                                    BorderThickness="{TemplateBinding BorderThickness}" FontSize="{TemplateBinding FontSize}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ToggleButton Grid.Column="1" IsTabStop="False" Focusable="False" Margin="-1 0 0 0" MinWidth="14" MinHeight="14" Style="{TemplateBinding ToggleButtonStyle}"
                                          Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                          tpf:BorderElement.CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=0\,#\,#\,0}"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Path x:Name="Symbol" Data="M0,0 L5,5 10,0 9.5,-0.5 5,4 0.5,-0.5 z" Fill="{tpf:ResourceLink Key=GlyphBrush}" IsHitTestVisible="false" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5 0"/>
                            </ToggleButton>
                        </Grid>

                        <Border x:Name="FocusVisual" IsHitTestVisible="False" Background="{x:Null}" Visibility="Collapsed"
                                BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{tpf:ResourceLink Key=FocusedAccentBrush}" CornerRadius="{TemplateBinding CornerRadius}"/>

                        <Popup IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                            <Border BorderThickness="1" BorderBrush="{TemplateBinding DropDownBorderBrush}" Background="{TemplateBinding DropDownBackground}" CornerRadius="{TemplateBinding CornerRadius}"
                                    MinWidth="{TemplateBinding DropDownMinWidth}" MinHeight="{TemplateBinding DropDownMinHeight}" 
                                    Width="{TemplateBinding DropDownWidth}" Height="{TemplateBinding DropDownHeight}"
                                    MaxWidth="{TemplateBinding DropDownMaxWidth}" MaxHeight="{TemplateBinding DropDownMaxHeight}">
                                <ContentControl Content="{TemplateBinding DropDownContent}" ContentTemplate="{TemplateBinding DropDownContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                Foreground="{TemplateBinding DropDownForeground}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            </Border>
                        </Popup>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="FocusVisual" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="PART_Button" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
                            <Setter Property="Foreground" TargetName="PART_Button" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="Symbol" Property="Fill" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:SplitButton" BasedOn="{StaticResource TPF.SplitButtonStyle}"/>

    <!-- ==================== CalendarButton ==================== -->
    <!-- ==================== CalendarView ==================== -->
    <!-- ==================== Calendar ==================== -->

    <!-- ==================== Clock ==================== -->

    <!-- ==================== Calculator ==================== -->

    <!-- ==================== Notification ==================== -->

    <!-- ==================== ProgressButton ==================== -->
    <Style TargetType="tpf:ProgressButton" x:Key="TPF.ProgressButtonStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="ProgressBrush" Value="{tpf:ResourceLink Key=ProgressBarBrush}"/>
        <Setter Property="SecondaryProgressBrush" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ProgressButton">
                    <tpf:SimplePanel>
                        <tpf:ProgressBar x:Name="ProgressBar" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                         Foreground="{TemplateBinding Foreground}" ProgressBrush="{TemplateBinding ProgressBrush}" SecondaryProgressBrush="{TemplateBinding SecondaryProgressBrush}"
                                         CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" IsIndeterminate="{TemplateBinding IsIndeterminate}" Height="NaN"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Progress="{TemplateBinding Progress}" SecondaryProgress="{TemplateBinding SecondaryProgress}" Focusable="False"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="ProgressBar" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ProgressButton" BasedOn="{StaticResource TPF.ProgressButtonStyle}"/>

    <!-- ==================== StepProgressBar ==================== -->
    <tpf:StepItemIndicatorTemplateSelector x:Key="StepItemIndicatorTemplateSelector">
        <tpf:StepItemIndicatorTemplateSelector.CompleteTemplate>
            <DataTemplate>
                <tpf:SimplePanel>
                    <Ellipse Width="24" Height="24" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{tpf:ResourceLink Key=SelectedBrush}" Stroke="{tpf:ResourceLink Key=SelectedBrush}"/>
                    <Path Width="13" Height="9" Data="M0,4 L2,6 7,0 7.5,0.5 2,7 -0.5,4.5 z" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill"
                                      Fill="{tpf:ResourceLink Key=SelectedTextBrush}" Stroke="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                </tpf:SimplePanel>
            </DataTemplate>
        </tpf:StepItemIndicatorTemplateSelector.CompleteTemplate>
        <tpf:StepItemIndicatorTemplateSelector.IndeterminateTemplate>
            <DataTemplate>
                <Ellipse Width="24" Height="24" Fill="{tpf:ResourceLink Key=PrimaryBrush}" Stroke="{tpf:ResourceLink Key=SelectedBrush}" StrokeThickness="4"/>
            </DataTemplate>
        </tpf:StepItemIndicatorTemplateSelector.IndeterminateTemplate>
        <tpf:StepItemIndicatorTemplateSelector.InactiveTemplate>
            <DataTemplate>
                <Ellipse Width="24" Height="24" Fill="{tpf:ResourceLink Key=PrimaryBrush}" Stroke="{tpf:ResourceLink Key=BorderBrush}"/>
            </DataTemplate>
        </tpf:StepItemIndicatorTemplateSelector.InactiveTemplate>
    </tpf:StepItemIndicatorTemplateSelector>
    <Style TargetType="tpf:StepProgressBar" BasedOn="{StaticResource TPF.StepProgressBarStyle}" x:Key="TPF.StepProgressBarStyle">
        <Setter Property="IndicatorTemplateSelector" Value="{StaticResource StepItemIndicatorTemplateSelector}"/>
    </Style>
    <Style TargetType="tpf:StepProgressBar" BasedOn="{StaticResource TPF.StepProgressBarStyle}"/>

    <!-- ==================== BusyIndicator ==================== -->

    <!-- ==================== WatermarkTextBox ==================== -->
    <Style TargetType="tpf:WatermarkTextBox" x:Key="TPF.WatermarkTextBoxStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:WatermarkTextBox">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:WatermarkTextBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:WatermarkTextBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:WatermarkTextBox}, Path=(tpf:BorderElement.CornerRadius)}">
                            <tpf:SimplePanel>
                                <ScrollViewer Name="PART_ContentHost" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Focusable="False"
                                              BorderThickness="0" Padding="{TemplateBinding Padding}"/>
                                <ContentPresenter x:Name="Watermark" ContentSource="Watermark" Margin="{TemplateBinding Padding}" Visibility="Visible" Focusable="False" KeyboardNavigation.IsTabStop="False"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False"
                                              TextElement.Foreground="{tpf:ResourceLink Key=ReadOnlyTextBrush}" TextElement.FontFamily="Arial"/>
                            </tpf:SimplePanel>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsWatermarkVisible" Value="False">
                            <Setter TargetName="Watermark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:WatermarkTextBox" BasedOn="{StaticResource TPF.WatermarkTextBoxStyle}"/>

    <!-- ==================== PasswordBox ==================== -->
    <Style TargetType="tpf:PasswordBox" x:Key="TPF.PasswordBoxStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:PasswordBox">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:WatermarkTextBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:WatermarkTextBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:WatermarkTextBox}, Path=(tpf:BorderElement.CornerRadius)}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ScrollViewer Name="PART_ContentHost" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Focusable="False"
                                              BorderThickness="0" Padding="{TemplateBinding Padding}"/>
                                <ContentPresenter x:Name="Watermark" ContentSource="Watermark" Margin="{TemplateBinding Padding}" Visibility="Visible" Focusable="False" KeyboardNavigation.IsTabStop="False"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False"
                                                  TextElement.Foreground="{tpf:ResourceLink Key=ReadOnlyTextBrush}" TextElement.FontFamily="Arial"/>

                                <tpf:Button x:Name="PART_ShowPasswordButton" IsTabStop="False" Focusable="False" Grid.Column="1" Cursor="Hand" HorizontalAlignment="Right" 
                                            Visibility="{TemplateBinding ShowPasswordButtonVisibility}" Style="{StaticResource TPF.PasswordBoxButtonStyle}"/>
                            </Grid>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsWatermarkVisible" Value="False">
                            <Setter TargetName="Watermark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:PasswordBox" BasedOn="{StaticResource TPF.PasswordBoxStyle}"/>

    <!-- ==================== SearchTextBox ==================== -->
    <Style TargetType="Button" BasedOn="{StaticResource WPF.ButtonStyle}" x:Key="TPF.SearchTextBoxQueryButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4 2"/>
    </Style>
    <Style TargetType="tpf:SearchTextBox" x:Key="TPF.SearchTextBoxStyle">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="DropDownMaxHeight" Value="200"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ItemsBorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="ItemsBackground" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="ItemsForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Watermark" Value="Suche"/>
        <Setter Property="QueryButtonCommand" Value="{x:Static tpf:SearchTextBox.SubmitQuery}"/>
        <Setter Property="QueryButtonContent" Value="{StaticResource SearchGeometry}"/>
        <Setter Property="QueryButtonContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Data="{Binding}" Fill="{Binding RelativeSource={RelativeSource AncestorType=ContentPresenter}, Path=(TextElement.Foreground)}" Stretch="Uniform" Width="12" Height="12"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:SearchTextBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <tpf:WatermarkTextBox x:Name="PART_TextBox" Grid.ColumnSpan="2" Watermark="{TemplateBinding Watermark}" MaxLength="{TemplateBinding MaxLength}" CharacterCasing="{TemplateBinding CharacterCasing}"
                                              Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Foreground="{TemplateBinding Foreground}" 
                                              CaretBrush="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              tpf:BorderElement.CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:SearchTextBox}, Path=(tpf:BorderElement.CornerRadius)}"
                                              Text="{Binding Value, RelativeSource={RelativeSource AncestorType=tpf:SearchTextBox}, UpdateSourceTrigger=PropertyChanged, Delay=100}"/>
                        <Button Grid.Column="1" Content="{TemplateBinding QueryButtonContent}" ContentTemplate="{TemplateBinding QueryButtonContentTemplate}" Command="{TemplateBinding QueryButtonCommand}"
                                tpf:BorderElement.CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:SearchTextBox}, Path=(tpf:BorderElement.CornerRadius)}"
                                Visibility="{TemplateBinding QueryButtonVisibility}" Style="{StaticResource TPF.SearchTextBoxQueryButtonStyle}"/>

                        <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <tpf:SimplePanel x:Name="PART_DropDownSizeElement" Width="{TemplateBinding ActualWidth}" MinWidth="{TemplateBinding DropDownMinWidth}" MaxWidth="{TemplateBinding DropDownMaxWidth}" MaxHeight="{TemplateBinding DropDownMaxHeight}">
                                <ListBox x:Name="PART_ListBox" Cursor="Hand" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}"
                                         tpf:BorderElement.CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:SearchTextBox}, Path=(tpf:BorderElement.CornerRadius)}"
                                         ItemsSource="{TemplateBinding FilteredItems}" DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                         ItemContainerStyle="{TemplateBinding ItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                                         ItemTemplate="{TemplateBinding ItemTemplate}" ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                         Background="{TemplateBinding ItemsBackground}" Foreground="{TemplateBinding ItemsForeground}" BorderBrush="{TemplateBinding ItemsBorderBrush}"/>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding ItemsBackground}" Visibility="{Binding Visibility, ElementName=PART_NoResultsContentPresenter}"
                                        CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:SearchTextBox}, Path=(tpf:BorderElement.CornerRadius)}">
                                    <ContentPresenter x:Name="PART_NoResultsContentPresenter" Content="{TemplateBinding NoResultsContent}" ContentTemplate="{TemplateBinding NoResultsContentTemplate}" Visibility="Collapsed" Margin="4 2"/>
                                </Border>
                            </tpf:SimplePanel>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:SearchTextBox" BasedOn="{StaticResource TPF.SearchTextBoxStyle}"/>

    <!-- ==================== NumericRangeBox ==================== -->
    <Style TargetType="RepeatButton" x:Key="WPF.NumericRangeBoxRepeatButtonStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:NumericRangeBox" x:Key="TPF.NumericRangeBoxStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="PositiveForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="NegativeForeground" Value="Red"/>
        <Setter Property="ZeroForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:NumericRangeBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Border x:Name="Background" Grid.ColumnSpan="2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:NumericRangeBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Grid.ColumnSpan="2" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" 
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:NumericRangeBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <TextBox x:Name="PART_TextBox" IsReadOnly="{TemplateBinding IsReadOnly}" Padding="{TemplateBinding Padding}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" CaretBrush="{TemplateBinding Foreground}"
                                 BorderThickness="0" BorderBrush="Transparent" Foreground="{TemplateBinding Foreground}" TabIndex="{TemplateBinding TabIndex}">
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox">
                                    <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" BorderBrush="Transparent" BorderThickness="0" Background="Transparent" IsTabStop="False"
                                                  VerticalScrollBarVisibility="Auto"/>
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>

                        <Grid x:Name="ButtonsGrid" Grid.Column="1" Visibility="Collapsed">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <RepeatButton x:Name="PART_IncreaseButton" Style="{StaticResource WPF.NumericRangeBoxRepeatButtonStyle}" Grid.Row="0">
                                <Path Width="9" Height="6" Data="M1,4.5 L4.5,1 L8,4.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="1"/>
                            </RepeatButton>
                            <RepeatButton x:Name="PART_DecreaseButton" Style="{StaticResource WPF.NumericRangeBoxRepeatButtonStyle}" Grid.Row="1">
                                <Path Width="9" Height="6" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="1"/>
                            </RepeatButton>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.1"/>
                            <Setter TargetName="PART_IncreaseButton" Property="IsEnabled" Value="False"/>
                            <Setter TargetName="PART_DecreaseButton" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="PART_TextBox" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="ShowButtons" Value="True">
                            <Setter TargetName="ButtonsGrid" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ApplyPositiveForeground" Value="True"/>
                                <Condition Property="NumericValueType" Value="Positive"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding PositiveForeground, RelativeSource={RelativeSource AncestorType=tpf:NumericRangeBox}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ApplyNegativeForeground" Value="True"/>
                                <Condition Property="NumericValueType" Value="Negative"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding NegativeForeground, RelativeSource={RelativeSource AncestorType=tpf:NumericRangeBox}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ApplyZeroForeground" Value="True"/>
                                <Condition Property="NumericValueType" Value="Zero"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding ZeroForeground, RelativeSource={RelativeSource AncestorType=tpf:NumericRangeBox}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:NumericRangeBox" BasedOn="{StaticResource TPF.NumericRangeBoxStyle}"/>

    <!-- ==================== DateTimePicker ==================== -->
    <Style TargetType="tpf:DateTimePicker" x:Key="TPF.DateTimePickerStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="ParsingToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Background="{tpf:ResourceLink Key=PrimaryBrush}" BorderBrush="{tpf:ResourceLink Key=BorderBrush}" BorderThickness="1" Padding="3" CornerRadius="4">
                        <ContentControl Foreground="{tpf:ResourceLink Key=TextBrush}" Content="{Binding }"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:DateTimePicker">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Border x:Name="Background" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:DateTimePicker}, Path=(tpf:BorderElement.CornerRadius)}"/>

                        <tpf:WatermarkTextBox x:Name="PART_TextBox" Grid.Column="0" Foreground="{TemplateBinding Foreground}" Background="{x:Null}" BorderThickness="0" CaretBrush="{TemplateBinding Foreground}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SelectionOnFocus="{TemplateBinding SelectionOnFocus}"
                                              Watermark="{TemplateBinding Watermark}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" IsReadOnly="{TemplateBinding IsReadOnly}"
                                              Text="{Binding DateTimeText, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                              tpf:BorderElement.CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:DateTimePicker}, Path=(tpf:BorderElement.CornerRadius), Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=#\,0\,0\,#}"/>

                        <ToggleButton x:Name="DropDownButton" Grid.Column="1" BorderThickness="0" Margin="1" Background="Transparent" Visibility="{TemplateBinding DropDownButtonVisibility}"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      tpf:BorderElement.CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:DateTimePicker}, Path=(tpf:BorderElement.CornerRadius), Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=0\,#\,#\,0}">
                            <Path x:Name="DropDownIcon" Data="{StaticResource CalendarGeometry}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Width="16" Height="16"/>
                        </ToggleButton>

                        <Popup IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Border Background="{TemplateBinding Background}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <tpf:Calendar x:Name="Calendar" Grid.Column="0" BorderThickness="1 1 0 1" Style="{TemplateBinding CalendarStyle}" DisplayMode="{TemplateBinding CalendarDisplayMode}"
                                                  Culture="{TemplateBinding Culture}" SelectedDate="{Binding Date, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" SelectionMode="Single"
                                                  DisplayDate="{Binding DisplayDate, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" DateSelectionMode="{TemplateBinding DateSelectionMode}"
                                                  DisplayDateStart="{TemplateBinding DisplayDateStart}" DisplayDateEnd="{TemplateBinding DisplayDateEnd}"
                                                  SelectableDateStart="{TemplateBinding SelectableDateStart}" SelectableDateEnd="{TemplateBinding SelectableDateEnd}"/>

                                    <tpf:Clock x:Name="Clock" Grid.Column="1" Style="{TemplateBinding ClockStyle}" DisplayMode="{TemplateBinding ClockDisplayMode}" Is24Hours="{TemplateBinding IsClock24Hours}"
                                               SelectedTime="{Binding Time, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Popup>

                        <Popup IsOpen="{Binding IsParsingToolTipOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True" 
                               Placement="Top" PlacementTarget="{Binding ElementName=Background}">
                            <ContentPresenter Content="{TemplateBinding ParsingToolTip}" ContentTemplate="{TemplateBinding ParsingToolTipTemplate}"/>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_TextBox" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="DropDownButton" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="InputMode" Value="Date">
                            <Setter TargetName="Calendar" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Clock" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="DropDownIcon" Property="Data" Value="{StaticResource CalendarGeometry}"/>
                        </Trigger>
                        <Trigger Property="InputMode" Value="Time">
                            <Setter TargetName="Calendar" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Clock" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="DropDownIcon" Property="Data" Value="{StaticResource ClockGeometry}"/>
                        </Trigger>
                        <Trigger Property="InputMode" Value="DateTime">
                            <Setter TargetName="Calendar" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Clock" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="DropDownIcon" Property="Data" Value="{StaticResource CalendarGeometry}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:DateTimePicker" BasedOn="{StaticResource TPF.DateTimePickerStyle}"/>

    <!-- ==================== ComboBox ==================== -->
    <Style TargetType="ToggleButton" x:Key="TPF.ComboBoxToggleButtonStyle">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(tpf:BorderElement.CornerRadius)}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter x:Name="Content" Grid.Column="0" TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" RecognizesAccessKey="True">
                                    <ContentPresenter.Resources>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                        </Style>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                                <Path x:Name="DropDownIcon" Grid.Column="1" Data="M0,0 L5,5 10,0 9.5,-0.5 5,4 0.5,-0.5 z" Stretch="Fill" Width="8" Height="5" Margin="5 0" Fill="{tpf:ResourceLink Key=GlyphBrush}"/>
                            </Grid>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="Background" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox" x:Key="TPF.ComboBoxEditableTextBoxStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    <ControlTemplate TargetType="tpf:ComboBox" x:Key="TPF.ComboBoxTemplate">
        <tpf:SimplePanel>
            <ToggleButton x:Name="PART_DropDownButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                          Style="{StaticResource TPF.ComboBoxToggleButtonStyle}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False"
                          tpf:BorderElement.CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBox}, Path=(tpf:BorderElement.CornerRadius)}"
                          Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}"/>
            <Popup x:Name="PART_Popup" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                <tpf:SimplePanel>
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBox}, Path=(tpf:BorderElement.CornerRadius)}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=PART_DropDownButton}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Button x:Name="PART_ClearButton" Grid.Row="0" Margin="-1 -1 -1 0" Visibility="{TemplateBinding ClearSelectionButtonVisibility}" Style="{StaticResource WPF.ButtonStyle}"
                                    tpf:BorderElement.CornerRadius="0" Content="{TemplateBinding ClearSelectionButtonContent}"/>
                            <ScrollViewer Grid.Row="1" BorderThickness="0" Foreground="{TemplateBinding Foreground}" Padding="0 1 0 0">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </tpf:SimplePanel>
            </Popup>
        </tpf:SimplePanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="tpf:ComboBox" x:Key="TPF.EditableComboBoxTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Margin="1 1 0 1" Padding="{TemplateBinding Padding}"
                     Style="{TemplateBinding TextBoxStyle}" IsReadOnly="{TemplateBinding IsReadOnly}" VerticalAlignment="Stretch"
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center">
                <TextBox.Template>
                    <ControlTemplate TargetType="TextBox">
                        <tpf:SimplePanel>
                            <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                          Background="{TemplateBinding Background}" IsTabStop="false" VerticalScrollBarVisibility="Auto" VerticalContentAlignment="Stretch"/>
                        </tpf:SimplePanel>
                    </ControlTemplate>
                </TextBox.Template>
            </TextBox>
            <ToggleButton x:Name="PART_DropDownButton" Grid.Column="1" Background="{Binding Background, ElementName=PART_EditableTextBox}" BorderBrush="Transparent" BorderThickness="0" Padding="0"
                          Style="{StaticResource TPF.ComboBoxToggleButtonStyle}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False"
                          tpf:BorderElement.CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
            <Border x:Name="Border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="false"
                    CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBox}, Path=(tpf:BorderElement.CornerRadius)}"/>
            <TextBlock x:Name="Watermark" IsHitTestVisible="False" Text="{TemplateBinding EmptyText}" Padding="{TemplateBinding Padding}"
                       VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed" Margin="4 0 0 0"/>
            <Popup x:Name="PART_Popup" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                <tpf:SimplePanel>
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=tpf:ComboBox}}"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBox}, Path=(tpf:BorderElement.CornerRadius)}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Button x:Name="PART_ClearButton" Grid.Row="0" Margin="-1 -1 -1 0" Visibility="{TemplateBinding ClearSelectionButtonVisibility}" Style="{StaticResource WPF.ButtonStyle}"
                                    Content="{TemplateBinding ClearSelectionButtonContent}"/>
                            <ScrollViewer Grid.Row="1" BorderThickness="0" Foreground="{TemplateBinding Foreground}" Padding="0 1 0 0">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </tpf:SimplePanel>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger SourceName="PART_EditableTextBox" Property="Text" Value="">
                <Setter TargetName="Watermark" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="tpf:ComboBox" x:Key="TPF.ComboBoxStyle">
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MaxDropDownHeight" Value="200"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="5 3"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="EditableTemplate" Value="{StaticResource TPF.EditableComboBoxTemplate}"/>
        <Setter Property="TextBoxStyle" Value="{StaticResource TPF.ComboBoxEditableTextBoxStyle}"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="Template" Value="{StaticResource TPF.ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="Template" Value="{Binding EditableTemplate, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="tpf:ComboBox" BasedOn="{StaticResource TPF.ComboBoxStyle}"/>
    <Style TargetType="tpf:ComboBoxItem" x:Key="TPF.ComboBoxItemStyle">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5 2"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ComboBoxItem">
                    <tpf:SimplePanel>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBoxItem}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBoxItem}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBoxItem}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <Border x:Name="Selector" Width="3" Background="{tpf:ResourceLink Key=SelectedBrush}" HorizontalAlignment="Left" Visibility="Collapsed" IsHitTestVisible="False"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ComboBoxItem}, Path=(tpf:BorderElement.CornerRadius), Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=#\,0\,0\,#}"/>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=tpf:ComboBox}, Path=AllowMultiSelection}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                                <Setter TargetName="Selector" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ComboBoxItem" BasedOn="{StaticResource TPF.ComboBoxItemStyle}"/>

    <!-- ==================== Slider ==================== -->

    <!-- ==================== ResizeableScrollBar ==================== -->
    <ControlTemplate TargetType="Thumb" x:Key="TPF.ResizeableScrollBarResizeThumbTemplate">
        <tpf:SimplePanel Background="Transparent">
            <Border x:Name="Bar" Background="{tpf:ResourceLink Key=AccentBrush}" 
                    CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=Thumb}, Path=(tpf:BorderElement.CornerRadius)}" SnapsToDevicePixels="True"/>
        </tpf:SimplePanel>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Bar" Property="Background" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter TargetName="Bar" Property="Background" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Bar" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="Thumb" x:Key="TPF.ResizeableScrollBarHorizontalResizeThumbStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="0 3"/>
        <Setter Property="Width" Value="4"/>
        <Setter Property="Template" Value="{StaticResource TPF.ResizeableScrollBarResizeThumbTemplate}"/>
    </Style>
    <Style TargetType="Thumb" x:Key="TPF.ResizeableScrollBarVerticalResizeThumbStyle" BasedOn="{StaticResource TPF.ResizeableScrollBarHorizontalResizeThumbStyle}">
        <Setter Property="Margin" Value="3 0"/>
        <Setter Property="Height" Value="4"/>
        <Setter Property="Width" Value="NaN"/>
    </Style>
    <Style TargetType="Thumb" x:Key="TPF.ResizeableScrollBarHorizontalMiddleThumbStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="0 3"/>
        <Setter Property="Template" Value="{StaticResource TPF.ResizeableScrollBarMiddleThumbTemplate}"/>
    </Style>
    <Style TargetType="Thumb" x:Key="TPF.ResizeableScrollBarVerticalMiddleThumbStyle" BasedOn="{StaticResource TPF.ResizeableScrollBarHorizontalMiddleThumbStyle}">
        <Setter Property="Margin" Value="3 0"/>
    </Style>
    <ControlTemplate TargetType="tpf:ResizeableScrollBar" x:Key="TPF.HorizontalResizeableScrollBarTemplate">
        <Grid UseLayoutRounding="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Border Grid.ColumnSpan="3" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>

            <RepeatButton Grid.Column="0" Width="12" Style="{StaticResource TPF.ResizeableScrollBarRepeatButtonStyle}" 
                          Command="{x:Static tpf:ResizeableScrollBar.LineLeft}" Visibility="{TemplateBinding ButtonVisibility}">
                <Path Width="5" Height="6" Data="M0,3 L4,0 5,0 5,6 4,6 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>

            <tpf:ResizeableScrollBarTrack x:Name="PART_Track" Grid.Column="1" Orientation="Horizontal">
                <tpf:ResizeableScrollBarTrack.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource TPF.ResizeableScrollBarRepeatButtonStyle}" Command="{x:Static tpf:ResizeableScrollBar.PageLeft}"/>
                </tpf:ResizeableScrollBarTrack.DecreaseRepeatButton>
                <tpf:ResizeableScrollBarTrack.StartThumb>
                    <Thumb Style="{TemplateBinding StartThumbStyle}" Cursor="SizeWE" tpf:BorderElement.CornerRadius="3 0 0 3"/>
                </tpf:ResizeableScrollBarTrack.StartThumb>
                <tpf:ResizeableScrollBarTrack.MiddleThumb>
                    <Thumb Style="{TemplateBinding MiddleThumbStyle}"/>
                </tpf:ResizeableScrollBarTrack.MiddleThumb>
                <tpf:ResizeableScrollBarTrack.EndThumb>
                    <Thumb Style="{TemplateBinding EndThumbStyle}" Cursor="SizeWE" tpf:BorderElement.CornerRadius="0 3 3 0"/>
                </tpf:ResizeableScrollBarTrack.EndThumb>
                <tpf:ResizeableScrollBarTrack.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource TPF.ResizeableScrollBarRepeatButtonStyle}" Command="{x:Static tpf:ResizeableScrollBar.PageRight}"/>
                </tpf:ResizeableScrollBarTrack.IncreaseRepeatButton>
            </tpf:ResizeableScrollBarTrack>

            <RepeatButton Grid.Column="2" Width="12" Style="{StaticResource TPF.ResizeableScrollBarRepeatButtonStyle}" 
                          Command="{x:Static tpf:ResizeableScrollBar.LineRight}" Visibility="{TemplateBinding ButtonVisibility}">
                <Path Width="5" Height="6" Data="M0,0 L0,6 1,6 5,3 1,0 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <ControlTemplate TargetType="tpf:ResizeableScrollBar" x:Key="TPF.VerticalResizeableScrollBarTemplate">
        <Grid UseLayoutRounding="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Border Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>

            <RepeatButton Grid.Row="0" Height="12" Style="{StaticResource TPF.ResizeableScrollBarRepeatButtonStyle}" 
                          Command="{x:Static tpf:ResizeableScrollBar.LineUp}" Visibility="{TemplateBinding ButtonVisibility}">
                <Path Margin="0 0 0 0" Width="6" Height="5" Data="M0,5 L0,4 3,0 6,4 6,5 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>

            <tpf:ResizeableScrollBarTrack x:Name="PART_Track" Grid.Row="1" Orientation="Vertical">
                <tpf:ResizeableScrollBarTrack.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource TPF.ResizeableScrollBarRepeatButtonStyle}" Command="{x:Static tpf:ResizeableScrollBar.PageUp}"/>
                </tpf:ResizeableScrollBarTrack.DecreaseRepeatButton>
                <tpf:ResizeableScrollBarTrack.StartThumb>
                    <Thumb Style="{TemplateBinding StartThumbStyle}" Cursor="SizeNS" tpf:BorderElement.CornerRadius="3 3 0 0"/>
                </tpf:ResizeableScrollBarTrack.StartThumb>
                <tpf:ResizeableScrollBarTrack.MiddleThumb>
                    <Thumb Style="{TemplateBinding MiddleThumbStyle}"/>
                </tpf:ResizeableScrollBarTrack.MiddleThumb>
                <tpf:ResizeableScrollBarTrack.EndThumb>
                    <Thumb Style="{TemplateBinding EndThumbStyle}" Cursor="SizeNS" tpf:BorderElement.CornerRadius="0 0 3 3"/>
                </tpf:ResizeableScrollBarTrack.EndThumb>
                <tpf:ResizeableScrollBarTrack.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource TPF.ResizeableScrollBarRepeatButtonStyle}" Command="{x:Static tpf:ResizeableScrollBar.PageDown}"/>
                </tpf:ResizeableScrollBarTrack.IncreaseRepeatButton>
            </tpf:ResizeableScrollBarTrack>

            <RepeatButton Grid.Row="2" Height="12" Style="{StaticResource TPF.ResizeableScrollBarRepeatButtonStyle}" 
                          Command="{x:Static tpf:ResizeableScrollBar.LineDown}" Visibility="{TemplateBinding ButtonVisibility}">
                <Path Width="6" Height="5" Data="M0,0 L6,0 6,1 3,5 0,1 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <Style TargetType="tpf:ResizeableScrollBar" x:Key="TPF.ResizeableScrollBarStyle">
        <Setter Property="MinWidth" Value="12"/>
        <Setter Property="MinHeight" Value="12"/>
        <Setter Property="Height" Value="12"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=ScrollBarBackgroundBrush}"/>
        <Setter Property="Template" Value="{StaticResource TPF.HorizontalResizeableScrollBarTemplate}"/>
        <Setter Property="StartThumbStyle" Value="{StaticResource TPF.ResizeableScrollBarHorizontalResizeThumbStyle}"/>
        <Setter Property="MiddleThumbStyle" Value="{StaticResource TPF.ResizeableScrollBarHorizontalMiddleThumbStyle}"/>
        <Setter Property="EndThumbStyle" Value="{StaticResource TPF.ResizeableScrollBarHorizontalResizeThumbStyle}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource TPF.VerticalResizeableScrollBarTemplate}"/>
                <Setter Property="StartThumbStyle" Value="{StaticResource TPF.ResizeableScrollBarVerticalResizeThumbStyle}"/>
                <Setter Property="MiddleThumbStyle" Value="{StaticResource TPF.ResizeableScrollBarVerticalMiddleThumbStyle}"/>
                <Setter Property="EndThumbStyle" Value="{StaticResource TPF.ResizeableScrollBarVerticalResizeThumbStyle}"/>
                <Setter Property="Width" Value="12"/>
                <Setter Property="Height" Value="Auto"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="tpf:ResizeableScrollBar" BasedOn="{StaticResource TPF.ResizeableScrollBarStyle}"/>

    <!-- ==================== Color-Editor ==================== -->
    <Style TargetType="tpf:ColorEditor" BasedOn="{StaticResource TPF.ColorEditorStyle}" x:Key="TPF.ColorEditorStyle">
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
    </Style>
    <Style TargetType="tpf:ColorEditor" BasedOn="{StaticResource TPF.ColorEditorStyle}"/>

    <!-- ==================== HamburgerMenu ==================== -->
    <!-- ==================== HamburgerMenuItem ==================== -->
    <ControlTemplate TargetType="tpf:HamburgerMenuItem" x:Key="TPF.ItemHamburgerMenuItemTemplate">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Grid x:Name="PART_LabelContainer" Grid.Row="0" Height="36">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType=tpf:HamburgerMenu}, Path=MenuCollapsedWidth}"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Border Grid.ColumnSpan="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Background="Transparent"/>
                <Border Grid.ColumnSpan="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"/>
                <Border x:Name="Overlay" Grid.ColumnSpan="3" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False"/>
                <Border x:Name="Selector" Width="3" Background="{tpf:ResourceLink Key=SelectedBrush}" HorizontalAlignment="Left" Visibility="Collapsed" IsHitTestVisible="False"/>
                <ContentPresenter x:Name="IconPresenter" ContentSource="Icon" Grid.Column="0" TextElement.Foreground="{tpf:ResourceLink Key=GlyphBrush}"/>
                <ContentPresenter x:Name="LabelPresenter" ContentSource="Label" Grid.Column="1" RecognizesAccessKey="True" Margin="{TemplateBinding Padding}"
                                  TextElement.FontSize="{TemplateBinding FontSize}" TextElement.Foreground="{tpf:ResourceLink Key=TextBrush}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <tpf:SimplePanel x:Name="PART_ExpandCollapseTogglePanel" Grid.Column="2" Background="Transparent" MinWidth="36">
                    <ContentPresenter x:Name="ExpandIconPresenter" Content="{TemplateBinding ExpandIcon}" ContentTemplate="{TemplateBinding ExpandIconTemplate}" Visibility="Collapsed"/>
                    <ContentPresenter x:Name="CollapseIconPresenter" Content="{TemplateBinding CollapseIcon}" ContentTemplate="{TemplateBinding CollapseIconTemplate}" Visibility="Collapsed"/>
                </tpf:SimplePanel>
            </Grid>

            <ItemsPresenter Grid.Row="1" Visibility="{TemplateBinding IsExpanded, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                <Setter TargetName="Selector" Property="Visibility" Value="Visible"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasSelectedSubItem" Value="True"/>
                    <Condition Property="IsExpanded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                <Setter TargetName="Selector" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasItems" Value="True"/>
                    <Condition Property="IsExpanded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ExpandIconPresenter" Property="Visibility" Value="Visible"/>
                <Setter TargetName="CollapseIconPresenter" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasItems" Value="True"/>
                    <Condition Property="IsExpanded" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ExpandIconPresenter" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="CollapseIconPresenter" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="tpf:HamburgerMenuItem" BasedOn="{StaticResource TPF.HamburgerMenuItemStyle}" x:Key="TPF.HamburgerMenuItemStyle">
        <Setter Property="Padding" Value="10 0"/>
        <Setter Property="Template" Value="{StaticResource TPF.ItemHamburgerMenuItemTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="Header">
                <Setter Property="Template" Value="{StaticResource TPF.HeaderHamburgerMenuItemTemplate}"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger Property="Role" Value="Separator">
                <Setter Property="Template" Value="{StaticResource TPF.SeparatorHamburgerMenuItemTemplate}"/>
                <Setter Property="Background" Value="{tpf:ResourceLink Key=BorderBrush}"/>
                <Setter Property="IsTabStop" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="tpf:HamburgerMenuItem" BasedOn="{StaticResource TPF.HamburgerMenuItemStyle}"/>

    <!-- ==================== TaskBoardCard ==================== -->
    <Style TargetType="tpf:TaskBoardCard" BasedOn="{StaticResource TPF.TaskBoardCardStyle}" x:Key="TPF.TaskBoardCardStyle">
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="TagTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Background="{tpf:ResourceLink Key=HeaderBrush}" Margin="0 0 5 0" Padding="6 2" CornerRadius="8">
                        <ContentPresenter Content="{Binding }" TextElement.Foreground="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TaskBoardCard" BasedOn="{StaticResource TPF.TaskBoardCardStyle}"/>
    <!-- ==================== TaskBoardColumn ==================== -->
    <Style TargetType="tpf:TaskBoardColumn" BasedOn="{StaticResource TPF.TaskBoardColumnStyle}" x:Key="TPF.TaskBoardColumnStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="HeaderBackground" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
    </Style>
    <Style TargetType="tpf:TaskBoardColumn" BasedOn="{StaticResource TPF.TaskBoardColumnStyle}"/>
    <!-- ==================== TaskBoard ==================== -->
    <Style TargetType="tpf:TaskBoard" BasedOn="{StaticResource TPF.TaskBoardStyle}" x:Key="TPF.TaskBoardStyle">
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=SecondaryBrush}"/>
        <Setter Property="HeaderForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="HeaderPadding" Value="5"/>
        <Setter Property="Padding" Value="2"/>
    </Style>
    <Style TargetType="tpf:TaskBoard" BasedOn="{StaticResource TPF.TaskBoardStyle}"/>

    <!-- ==================== TabControl ==================== -->
    <Style TargetType="tabControl:TabControlDropdownItem" x:Key="TPF.TabControlDropdownItemStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="5 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tabControl:TabControlDropdownItem">
                    <tpf:SimplePanel x:Name="Root">
                        <Border x:Name="Background" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="4"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="4"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="4">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter x:Name="Content" Grid.Column="0" Content="{Binding Header}"/>

                                <tpf:SimplePanel x:Name="ButtonPanel" Grid.Column="1" Visibility="Hidden">
                                    <Button x:Name="CloseButton" Style="{StaticResource WPF.ChromelessButtonStyle}" Height="16" Width="16" Visibility="Collapsed" Margin="5 0 0 0"
                                            Command="{x:Static tpf:TabItemCommands.Close}" CommandTarget="{Binding }">
                                        <Path x:Name="CloseGlyph" Data="M 1,0 L 5,4 9,0 10,1 6,5 10,9 9,10 5,6 1,10 0,9 4,5 0,1 z" Width="10" Height="10" Fill="{tpf:ResourceLink Key=GlyphBrush}"/>
                                    </Button>
                                </tpf:SimplePanel>
                            </Grid>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                            <Setter TargetName="ButtonPanel" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger SourceName="CloseButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="CloseGlyph" Property="Fill" Value="Crimson"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding ShowCloseButton}" Value="True">
                            <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsEnabled}" Value="False">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tabControl:TabControlDropdownItem" BasedOn="{StaticResource TPF.TabControlDropdownItemStyle}"/>
    <Style TargetType="ButtonBase" x:Key="TPF.TabControlButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="tpf:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <tpf:SimplePanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ButtonBase}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ButtonBase}, Path=(tpf:BorderElement.CornerRadius)}"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ButtonBase}, Path=(tpf:BorderElement.CornerRadius)}">
                            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" TextElement.Foreground="{TemplateBinding Foreground}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TabControl" x:Key="TPF.TabControlStyle">
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HeaderBackground" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:TabControl">
                    <Grid x:Name="RootGrid" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>

                        <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0"
                                      HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Style="{StaticResource WPF.TabControlScrollViewerStyle}">
                            <TabPanel x:Name="PART_TabPanel" IsItemsHost="True" Background="{TemplateBinding HeaderBackground}" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        </ScrollViewer>

                        <StackPanel x:Name="ButtonsPanel" Grid.Row="0" Grid.Column="1" Margin="4 0" Orientation="Horizontal">
                            <Button x:Name="PART_AddButton" Style="{StaticResource TPF.TabControlButtonStyle}" ContentTemplate="{TemplateBinding AddButtonContentTemplate}" Visibility="Collapsed">
                                <Path Data="M0,3 L3,3 3,0 4,0 4,3 7,3 7,4 4,4 4,7 3,7 3,4 0,4 z" Fill="{Binding (TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"/>
                            </Button>
                            <ToggleButton x:Name="DropDownButton" Style="{StaticResource TPF.TabControlButtonStyle}" ContentTemplate="{TemplateBinding DropDownButtonContentTemplate}" Visibility="Collapsed"
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Path Data="M0,0 L9,0 4.5,5 z" Fill="{Binding (TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"/>
                            </ToggleButton>
                            <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=DropDownButton}" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True">
                                <Border Background="{tpf:ResourceLink Key=PrimaryBrush}" BorderBrush="{tpf:ResourceLink Key=BorderBrush}" BorderThickness="1" CornerRadius="4" Padding="2">
                                    <ItemsControl x:Name="PART_DropDownItemsPresenter"/>
                                </Border>
                            </Popup>
                        </StackPanel>

                        <Border x:Name="ContentPanel" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="PART_ScrollViewer" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ButtonsPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="PART_ScrollViewer" Value="0 0 0 2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="PART_ScrollViewer" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ButtonsPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="ContentPanel" Value="2"/>
                            <Setter Property="Grid.Column" TargetName="PART_ScrollViewer" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ButtonsPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="*"/>
                            <Setter Property="Margin" TargetName="PART_ScrollViewer" Value="0 0 0 0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="PART_ScrollViewer" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ButtonsPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="ContentPanel" Value="2"/>
                            <Setter Property="Grid.Column" TargetName="PART_ScrollViewer" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ButtonsPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="*"/>
                            <Setter Property="Margin" TargetName="PART_ScrollViewer" Value="0 0 0 0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="RootGrid" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="ShowAddButton" Value="True">
                            <Setter Property="Visibility" TargetName="PART_AddButton" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShowDropDownButton" Value="True">
                            <Setter Property="Visibility" TargetName="DropDownButton" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TabControl" BasedOn="{StaticResource TPF.TabControlStyle}"/>

    <!-- ==================== TabItem ==================== -->
    <Style TargetType="Button" BasedOn="{StaticResource WPF.ButtonStyle}" x:Key="TPF.TabItemHeaderButton">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="0 0 2 0"/>
        <Setter Property="Padding" Value="4"/>
    </Style>
    <Style TargetType="tpf:TabItem" x:Key="TPF.TabItemStyle">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HeaderForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Padding" Value="10 2"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="MinWidth" Value="26"/>
        <Setter Property="IconMargin" Value="5 0 0 0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:TabItem">
                    <tpf:SimplePanel x:Name="PART_Root" ToolTip="{TemplateBinding HeaderToolTip}">
                        <Border x:Name="Background" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"/>
                        <Border x:Name="Overlay" Background="{StaticResource OverlayBrush}" Opacity="0" IsHitTestVisible="False"/>
                        <Border BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter x:Name="IconPresenter" Grid.Column="0" Content="{TemplateBinding Icon}" Margin="{TemplateBinding IconMargin}"/>

                                <ContentPresenter x:Name="HeaderContent" Grid.Column="1" ContentSource="Header" TextBlock.Foreground="{TemplateBinding HeaderForeground}" Margin="{TemplateBinding Padding}"
                                                  RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                                <Button x:Name="PinButton" Grid.Column="2" Style="{StaticResource TPF.TabItemHeaderButton}" Command="{x:Static tpf:TabItemCommands.TogglePin}"
                                        IsTabStop="False" SnapsToDevicePixels="True" Visibility="Collapsed" Focusable="False">
                                    <Path x:Name="PinGlyph" Data="M5.8,0 L6,0 6,2 18,2 18,10 6,10 6,12 5.8,12 5.8,6.5 0,6.5 0,5.5 5.8,5.5 z M6,2.2 17.8,2.2 17.8,7 6,7 z" Width="10" Height="10" Stretch="Uniform"
                                          Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"
                                          Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                </Button>

                                <Button x:Name="CloseButton" Grid.Column="3" Style="{StaticResource TPF.TabItemHeaderButton}" Command="{x:Static tpf:TabItemCommands.Close}"
                                        IsTabStop="False" SnapsToDevicePixels="True" Visibility="Collapsed">
                                    <Path Data="M 1,0 L 5,4 9,0 10,1 6,5 10,9 9,10 5,6 1,10 0,9 4,5 0,1 z" Width="10" Height="10" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                </Button>
                            </Grid>
                        </Border>
                        <Border x:Name="SelectedVisual" Height="3" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" RenderTransformOrigin="0.5 0.5" Background="{tpf:ResourceLink Key=SelectedBrush}">
                            <Border.RenderTransform>
                                <ScaleTransform ScaleX="0" ScaleY="1"/>
                            </Border.RenderTransform>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HeaderContent" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="SelectedVisual">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="1">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <QuinticEase EasingMode="EaseIn"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="SelectedVisual">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseOut"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ShowCloseButton" Value="True">
                            <Setter TargetName="CloseButton" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="ShowPinButton" Value="True">
                            <Setter TargetName="PinButton" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsPinned" Value="True">
                            <Setter TargetName="PinGlyph" Property="Data" Value="M2,0 L10,0 10,12 12,12 12,12.2 6.5,12.2 6.5,18 5.5,18 5.5,12.2 0,12.2 0,12 2,12 z M2.2,0.2 L7,0.2 7,12 2.2,12 z"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowCloseButton" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowCloseButton" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowPinButton" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PinButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowPinButton" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PinButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowPinButton" Value="True"/>
                                <Condition Property="IsPinned" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PinButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger SourceName="PART_Root" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TabItem" BasedOn="{StaticResource TPF.TabItemStyle}"/>

    <!-- ==================== Poptip ==================== -->
    <Style TargetType="tpf:Poptip" BasedOn="{StaticResource TPF.PoptipStyle}" x:Key="TPF.PoptipStyle">
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Padding" Value="4"/>
    </Style>
    <Style TargetType="tpf:Poptip" BasedOn="{StaticResource TPF.PoptipStyle}"/>

    <!-- ==================== DialogHost ==================== -->
    <Style TargetType="tpf:DialogHost" BasedOn="{StaticResource TPF.DialogHostStyle}" x:Key="TPF.DialogHostStyle">
        <Setter Property="DialogCornerRadius" Value="8"/>
    </Style>
    <Style TargetType="tpf:DialogHost" BasedOn="{StaticResource TPF.DialogHostStyle}"/>

    <!-- ==================== TitleBar ==================== -->

    <!-- ==================== Window ==================== -->

    <!-- ==================== Widget ==================== -->
    <Style TargetType="tpf:Widget" BasedOn="{StaticResource TPF.WidgetStyle}" x:Key="TPF.WidgetStyle">
        <Setter Property="CornerRadius" Value="4"/>
    </Style>
    <Style TargetType="tpf:Widget" BasedOn="{StaticResource TPF.WidgetStyle}"/>
</ResourceDictionary>