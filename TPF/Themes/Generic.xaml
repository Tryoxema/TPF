<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:tpf="clr-namespace:TPF.Controls"
                    xmlns:behaviors="clr-namespace:TPF.DragDrop.Behaviors"
                    xmlns:converter="clr-namespace:TPF.Converter"
                    xmlns:animation="clr-namespace:TPF.Animations"
                    xmlns:calendar="clr-namespace:TPF.Controls.Specialized.Calendar"
                    xmlns:taskboard="clr-namespace:TPF.Controls.Specialized.TaskBoard"
                    xmlns:tabControl="clr-namespace:TPF.Controls.Specialized.TabControl"
                    xmlns:dashboard="clr-namespace:TPF.Controls.Specialized.Dashboard"
                    xmlns:databar="clr-namespace:TPF.Controls.Specialized.DataBar"
                    xmlns:dataaxis="clr-namespace:TPF.Controls.Specialized.DataAxis"
                    xmlns:sparkline="clr-namespace:TPF.Controls.Specialized.Sparkline">
    <!--Brushes-->
    <RadialGradientBrush x:Key="FluentRadialGradient">
        <GradientStop Color="#59FFFFFF" Offset="0.2"/>
        <GradientStop Color="Transparent" Offset="0.9"/>
        <GradientStop Color="Transparent" Offset="1"/>
        <GradientStop Color="Transparent" Offset="1.1"/>
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="FluentPressedRadialGradient" RadiusY="0.3" RadiusX="0.3" Center="0.5 0.5" GradientOrigin="0.5 0.5">
        <GradientStop Offset="1" Color="Transparent"/>
        <GradientStop Offset="0.75" Color="Transparent"/>
        <GradientStop Offset="0.55" Color="#35FFFFFF"/>
        <GradientStop Offset="0.4" Color="#35FFFFFF"/>
        <GradientStop Offset="0.2" Color="Transparent"/>
    </RadialGradientBrush>
    <RadialGradientBrush x:Key="FluentBorderGradient" RadiusX="0.33" RadiusY="1.5">
        <GradientStop Offset="1" Color="Transparent"/>
        <GradientStop Offset="0.4" Color="#7FFFFFFF"/>
    </RadialGradientBrush>
    <tpf:BrushCollection x:Key="BlueBrushCollection">
        <SolidColorBrush Color="#0D47A1" po:Freeze="True"/>
        <SolidColorBrush Color="#1565C0" po:Freeze="True"/>
        <SolidColorBrush Color="#1976D2" po:Freeze="True"/>
        <SolidColorBrush Color="#1E88E5" po:Freeze="True"/>
        <SolidColorBrush Color="#2196F3" po:Freeze="True"/>
        <SolidColorBrush Color="#42A5F5" po:Freeze="True"/>
        <SolidColorBrush Color="#64B5F6" po:Freeze="True"/>
        <SolidColorBrush Color="#90CAF9" po:Freeze="True"/>
        <SolidColorBrush Color="#BBDEFB" po:Freeze="True"/>
        <SolidColorBrush Color="#E0F2FE" po:Freeze="True"/>
    </tpf:BrushCollection>
    <tpf:BrushCollection x:Key="PurpleBrushCollection">
        <SolidColorBrush Color="#4A148C" po:Freeze="True"/>
        <SolidColorBrush Color="#6A1B9A" po:Freeze="True"/>
        <SolidColorBrush Color="#7B1FA2" po:Freeze="True"/>
        <SolidColorBrush Color="#8E24AA" po:Freeze="True"/>
        <SolidColorBrush Color="#9C27B0" po:Freeze="True"/>
        <SolidColorBrush Color="#AB47BC" po:Freeze="True"/>
        <SolidColorBrush Color="#BA68C8" po:Freeze="True"/>
        <SolidColorBrush Color="#CE93D8" po:Freeze="True"/>
        <SolidColorBrush Color="#E1BEE7" po:Freeze="True"/>
        <SolidColorBrush Color="#F3E5F5" po:Freeze="True"/>
    </tpf:BrushCollection>

    <!--Converter-->
    <converter:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converter:InvertedBooleanToVisibilityConverter x:Key="InvertedBooleanToVisibilityConverter"/>
    <converter:InvertedBooleanConverter x:Key="InvertedBooleanConverter"/>
    <converter:ColorToBrushConverter x:Key="ColorToBrushConverter"/>
    <converter:HueToBrushConverter x:Key="HueToBrushConverter"/>
    <converter:DoubleToThicknessConverter x:Key="DoubleToThicknessConverter"/>
    <converter:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <converter:NullToBooleanConverter x:Key="NullToBooleanConverter"/>
    <converter:ThicknessToSpecificThicknessConverter x:Key="ThicknessToSpecificThicknessConverter"/>
    <converter:CornerRadiusToSpecificCornerRadiusConverter x:Key="CornerRadiusToSpecificCornerRadiusConverter"/>
    <converter:IsFirstItemConverter x:Key="IsFirstItemConverter"/>
    <converter:IsLastItemConverter x:Key="IsLastItemConverter"/>
    <converter:DivideDoubleValueConverter x:Key="DivideDoubleValueConverter"/>
    <converter:IntToVisibilityConverter x:Key="IntToVisibilityConverter"/>

    <!--Default WPF Controls-->
    <!-- ========== ToolTip ========== -->
    <Style TargetType="ToolTip" x:Key="WPF.ToolTipStyle">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Label ========== -->
    <Style TargetType="Label" x:Key="WPF.LabelStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="Content" RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Button ========== -->
    <Style TargetType="Button" x:Key="WPF.ButtonStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=(tpf:BorderElement.CornerRadius)}">
                        <ContentPresenter x:Name="Content" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="WPF.ChromelessButtonStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=(tpf:BorderElement.CornerRadius)}">
                        <ContentPresenter x:Name="Content" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== RepeatButton ========== -->
    <Style TargetType="RepeatButton" x:Key="WPF.RepeatButtonStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=(tpf:BorderElement.CornerRadius)}">
                        <ContentPresenter x:Name="Content" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ToggleButton ========== -->
    <Style TargetType="ToggleButton" x:Key="WPF.ToggleButtonStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(tpf:BorderElement.CornerRadius)}">
                        <ContentPresenter x:Name="Content" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== CheckBox ========== -->
    <Style TargetType="CheckBox" x:Key="WPF.CheckBoxStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <tpf:SimplePanel Margin="1" Width="13" Height="13">
                            <Border x:Name="BackgroundBorder" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"/>
                            <Path x:Name="Checkmark" Width="9" Height="7" Data="M0,3 L3,6 7,0" Stretch="Fill" StrokeThickness="1.5" Stroke="{tpf:ResourceLink Key=TextBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"/>
                            <Rectangle x:Name="IndeterminateVisual" Width="9" Height="9" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{tpf:ResourceLink Key=TextBrush}" Visibility="Collapsed"/>
                        </tpf:SimplePanel>

                        <ContentPresenter x:Name="Content" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="true" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="Checkmark" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="IndeterminateVisual" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" TargetName="Checkmark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="IndeterminateVisual" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Checkmark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="IndeterminateVisual" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="BackgroundBorder" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="BackgroundBorder" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="Stroke" TargetName="Checkmark" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="BackgroundBorder" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="BackgroundBorder" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="Stroke" TargetName="Checkmark" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="BackgroundBorder" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="BackgroundBorder" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== TextBox ========== -->
    <Style TargetType="TextBox" x:Key="WPF.TextBoxStyle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="ControlBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False">
                        <ScrollViewer x:Name="PART_ContentHost" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Focusable="False" BorderThickness="0" Padding="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== PasswordBox ========== -->
    <Style TargetType="PasswordBox" x:Key="WPF.PasswordBoxStyle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border x:Name="ControlBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False">
                        <ScrollViewer x:Name="PART_ContentHost" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Focusable="False" BorderThickness="0" Padding="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ScrollBar ========== -->
    <Style TargetType="RepeatButton" x:Key="WPF.ScrollBarRepeatButtonStyle">
        <Setter Property="tpf:PathElement.Fill" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent">
                        <ContentPresenter/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="tpf:PathElement.Fill" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="tpf:PathElement.Fill" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate TargetType="Thumb" x:Key="WPF.ScrollBarThumbTemplate">
        <tpf:SimplePanel Background="Transparent">
            <Rectangle x:Name="Bar" Fill="{tpf:ResourceLink Key=ScrollBarBrush}" SnapsToDevicePixels="True"/>
        </tpf:SimplePanel>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Bar" Property="Fill" Value="{tpf:ResourceLink Key=ScrollBarMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter TargetName="Bar" Property="Fill" Value="{tpf:ResourceLink Key=ScrollBarPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Bar" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="Thumb" x:Key="WPF.ScrollBarHorizontalThumbStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="0 4"/>
        <Setter Property="Template" Value="{StaticResource WPF.ScrollBarThumbTemplate}"/>
    </Style>
    <Style TargetType="Thumb" x:Key="WPF.ScrollBarVerticalThumbStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="4 0"/>
        <Setter Property="Template" Value="{StaticResource WPF.ScrollBarThumbTemplate}"/>
    </Style>
    <ControlTemplate TargetType="ScrollBar" x:Key="WPF.ScrollBarHorizontalTemplate">
        <Grid UseLayoutRounding="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Border Grid.ColumnSpan="3" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>

            <RepeatButton Grid.Column="0" Width="15" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.LineLeftCommand}">
                <Path Width="5" Height="9" Data="M0,4.5 L5,0 5,9 z" Fill="{Binding Path=(tpf:PathElement.Fill), RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>

            <Track x:Name="PART_Track" Grid.Column="1" Orientation="Horizontal">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource WPF.ScrollBarHorizontalThumbStyle}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.PageRightCommand}"/>
                </Track.IncreaseRepeatButton>
            </Track>

            <RepeatButton Grid.Column="2" Width="15" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.LineRightCommand}">
                <Path Width="5" Height="9" Data="M0,0 L0,9 5,4.5 z" Fill="{Binding Path=(tpf:PathElement.Fill), RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <ControlTemplate TargetType="ScrollBar" x:Key="WPF.ScrollBarVerticalTemplate">
        <Grid UseLayoutRounding="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Border Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>

            <RepeatButton Grid.Row="0" Height="15" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.LineUpCommand}">
                <Path Margin="0 0 0 0" Width="9" Height="5" Data="M0,5 L4.5,0 9,5 z" Fill="{Binding Path=(tpf:PathElement.Fill), RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>

            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.PageUpCommand}"/>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource WPF.ScrollBarVerticalThumbStyle}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.PageDownCommand}"/>
                </Track.IncreaseRepeatButton>
            </Track>

            <RepeatButton Grid.Row="2" Height="15" Style="{StaticResource WPF.ScrollBarRepeatButtonStyle}" Command="{x:Static ScrollBar.LineDownCommand}">
                <Path Width="9" Height="5" Data="M0,0 L9,0 4.5,5 z" Fill="{Binding Path=(tpf:PathElement.Fill), RelativeSource={RelativeSource AncestorType=RepeatButton}}"/>
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <Style TargetType="ScrollBar" x:Key="WPF.ScrollBarStyle">
        <Setter Property="MinWidth" Value="16"/>
        <Setter Property="MinHeight" Value="16"/>
        <Setter Property="Width" Value="17"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=ScrollBarBackgroundBrush}"/>
        <Setter Property="Template" Value="{StaticResource WPF.ScrollBarVerticalTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Template" Value="{StaticResource WPF.ScrollBarHorizontalTemplate}"/>
                <Setter Property="Height" Value="17"/>
                <Setter Property="Width" Value="Auto"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ScrollViewer" x:Key="WPF.ScrollViewerStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"
                                                    Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>

                            <Border Grid.Row="1" Grid.ColumnSpan="2" Background="{tpf:ResourceLink Key=ScrollBarBackgroundBrush}"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Grid.Row="0" Style="{StaticResource WPF.ScrollBarStyle}"
                                       Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                            <ScrollBar x:Name="PART_HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" Style="{StaticResource WPF.ScrollBarStyle}"
                                       Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Expander ========== -->
    <ControlTemplate TargetType="ToggleButton" x:Key="WPF.ExpanderDownHeaderTemplate">
        <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="19"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Ellipse x:Name="Border" Width="19" Height="19" Stroke="{tpf:ResourceLink Key=BorderBrush}" Fill="{tpf:ResourceLink Key=PrimaryBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Path x:Name="Arrow" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                <ContentPresenter Grid.Column="1" Margin="4 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 L8,4.5"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                <Setter TargetName="Border" Property="Fill" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="StrokeThickness" Value="1.5"/>
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                <Setter TargetName="Border" Property="Fill" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                <Setter TargetName="Arrow" Property="Stroke" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="ToggleButton" x:Key="WPF.ExpanderUpHeaderTemplate">
        <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="19"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <tpf:SimplePanel RenderTransformOrigin="0.5 0.5">
                    <tpf:SimplePanel.RenderTransform>
                        <RotateTransform Angle="180"/>
                    </tpf:SimplePanel.RenderTransform>

                    <Ellipse x:Name="Border" Width="19" Height="19" Stroke="{tpf:ResourceLink Key=BorderBrush}" Fill="{tpf:ResourceLink Key=PrimaryBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </tpf:SimplePanel>

                <ContentPresenter Grid.Column="1" Margin="4 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 L8,4.5"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                <Setter TargetName="Border" Property="Fill" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="StrokeThickness" Value="1.5"/>
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                <Setter TargetName="Border" Property="Fill" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                <Setter TargetName="Arrow" Property="Stroke" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="ToggleButton" x:Key="WPF.ExpanderLeftHeaderTemplate">
        <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.RowDefinitions>
                    <RowDefinition Height="19"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <tpf:SimplePanel RenderTransformOrigin="0.5 0.5">
                    <tpf:SimplePanel.RenderTransform>
                        <RotateTransform Angle="90"/>
                    </tpf:SimplePanel.RenderTransform>

                    <Ellipse x:Name="Border" Width="19" Height="19" Stroke="{tpf:ResourceLink Key=BorderBrush}" Fill="{tpf:ResourceLink Key=PrimaryBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </tpf:SimplePanel>

                <ContentPresenter Grid.Row="1" Margin="0 4 0 0" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 L8,4.5"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                <Setter TargetName="Border" Property="Fill" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="StrokeThickness" Value="1.5"/>
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                <Setter TargetName="Border" Property="Fill" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                <Setter TargetName="Arrow" Property="Stroke" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="ToggleButton" x:Key="WPF.ExpanderRightHeaderTemplate">
        <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.RowDefinitions>
                    <RowDefinition Height="19"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <tpf:SimplePanel RenderTransformOrigin="0.5 0.5">
                    <tpf:SimplePanel.RenderTransform>
                        <RotateTransform Angle="-90"/>
                    </tpf:SimplePanel.RenderTransform>

                    <Ellipse x:Name="Border" Width="19" Height="19" Stroke="{tpf:ResourceLink Key=BorderBrush}" Fill="{tpf:ResourceLink Key=PrimaryBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" Data="M1,1.5 L4.5,5 L8,1.5" Stroke="{tpf:ResourceLink Key=GlyphBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </tpf:SimplePanel>

                <ContentPresenter Grid.Row="1" Margin="0 4 0 0" HorizontalAlignment="Center" VerticalAlignment="Top"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 L8,4.5"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                <Setter TargetName="Border" Property="Fill" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="StrokeThickness" Value="1.5"/>
                <Setter TargetName="Border" Property="Stroke" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                <Setter TargetName="Border" Property="Fill" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                <Setter TargetName="Arrow" Property="Stroke" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="Expander" x:Key="WPF.ExpanderStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="True">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderButton" DockPanel.Dock="Top" Margin="1" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          Template="{StaticResource WPF.ExpanderDownHeaderTemplate}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}"
                                          Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandContent" DockPanel.Dock="Bottom" Visibility="Collapsed" Focusable="False" Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter TargetName="ExpandContent" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandContent" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderButton" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderButton" Property="Template" Value="{StaticResource WPF.ExpanderRightHeaderTemplate}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandContent" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="HeaderButton" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="HeaderButton" Property="Template" Value="{StaticResource WPF.ExpanderUpHeaderTemplate}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandContent" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderButton" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderButton" Property="Template" Value="{StaticResource WPF.ExpanderLeftHeaderTemplate}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HeaderButton" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ListBox ========== -->
    <Style TargetType="ListBox" x:Key="WPF.ListBoxStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Margin="0" BorderThickness="0" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{x:Null}" Style="{StaticResource WPF.ScrollViewerStyle}"
                                      HorizontalScrollBarVisibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(ScrollViewer.HorizontalScrollBarVisibility)}"
                                      VerticalScrollBarVisibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(ScrollViewer.VerticalScrollBarVisibility)}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ========== ListBoxItem ========== -->
    <Style TargetType="ListBoxItem" x:Key="WPF.ListBoxItemStyle">
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="Content" TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                            <Setter TargetName="Border" Property="Background" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== TabControl ========== -->
    <Style TargetType="RepeatButton" x:Key="WPF.TabControlRepeatButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Data="{Binding}" Fill="{Binding RelativeSource={RelativeSource AncestorType=RepeatButton}, Path=Foreground}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border x:Name="Border" Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ScrollViewer" x:Key="WPF.TabControlScrollViewerStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid Margin="0" Grid.Row="0" Grid.Column="0" x:Name="HeaderPanel">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <RepeatButton x:Name="UpButton" Style="{StaticResource WPF.TabControlRepeatButtonStyle}" Height="14" Grid.Row="0" Grid.Column="1" Command="ScrollBar.LineUpCommand" Visibility="Collapsed">
                            <PathGeometry Figures="M0,4 L6,4 3,0 z"/>
                        </RepeatButton>
                        <RepeatButton x:Name="LeftButton" Style="{StaticResource WPF.TabControlRepeatButtonStyle}" Width="14" Grid.Row="1" Grid.Column="0" Command="ScrollBar.LineLeftCommand" Visibility="Collapsed">
                            <PathGeometry Figures="M4,0 L4,6 0,3 z"/>
                        </RepeatButton>
                        <ScrollContentPresenter Grid.Row="1" Grid.Column="1"/>
                        <RepeatButton x:Name="RightButton" Style="{StaticResource WPF.TabControlRepeatButtonStyle}" Width="14" Grid.Row="1" Grid.Column="2" Command="ScrollBar.LineRightCommand" Visibility="Collapsed">
                            <PathGeometry Figures="M0,0 L0,6 4,3 z"/>
                        </RepeatButton>
                        <RepeatButton x:Name="DownButton" Style="{StaticResource WPF.TabControlRepeatButtonStyle}" Height="14" Grid.Row="2" Grid.Column="1" Command="ScrollBar.LineDownCommand" Visibility="Collapsed">
                            <PathGeometry Figures="M0,0 L6,0 3,4 z"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComputedHorizontalScrollBarVisibility" Value="Visible">
                            <Setter TargetName="LeftButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RightButton" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ComputedVerticalScrollBarVisibility" Value="Visible">
                            <Setter TargetName="UpButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="DownButton" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TabControl" x:Key="WPF.TabControlStyle">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=HeaderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid x:Name="RootGrid" ClipToBounds="true" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>

                        <ScrollViewer x:Name="HeaderPanel" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0"
                                      HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Style="{StaticResource WPF.TabControlScrollViewerStyle}">
                            <TabPanel IsItemsHost="True" Background="Transparent" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        </ScrollViewer>

                        <Border x:Name="ContentPanel" Grid.Row="1" Grid.Column="0"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0 0 0 2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0 0 0 0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0 0 0 0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="RootGrid" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ========== TabItem ========== -->
    <Style TargetType="TabItem" x:Key="WPF.TabItemStyle">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <tpf:SimplePanel x:Name="Panel">
                        <Border x:Name="Border" BorderThickness="0" BorderBrush="{TemplateBinding Background}">
                            <ContentPresenter x:Name="HeaderContent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              ContentSource="Header" Margin="10 2"/>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HeaderContent" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
                            <Setter TargetName="HeaderContent" Property="TextBlock.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                            <Setter TargetName="HeaderContent" Property="TextBlock.Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="Background" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                                <Setter TargetName="HeaderContent" Property="TextBlock.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== GroupBox ========== -->
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style TargetType="GroupBox" x:Key="WPF.GroupBoxStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>

                        <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3 1 3 0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== GridSplitter ========== -->
    <Style TargetType="GridSplitter" x:Key="WPF.GridSplitterStyle">
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="MinHeight" Value="5"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Border x:Name="ControlBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=GridSplitter}, Path=(tpf:BorderElement.CornerRadius)}">
                        <Path x:Name="Path" Width="3" Height="14" Data="M0,0 L0,14 1,14 1,0 z M2,0 L2,14 3,14 3,0 z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ControlBorder" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Stretch">
                            <Setter TargetName="Path" Property="Data" Value="M0,0 L14,0 14,1 0,1 z M0,2 L14,2 14,3 0,3 z"/>
                            <Setter TargetName="Path" Property="Width" Value="14"/>
                            <Setter TargetName="Path" Property="Height" Value="3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TPF Controls-->
    <!-- ========== Shadow ========== -->
    <Style TargetType="tpf:Shadow" x:Key="TPF.ShadowStyle">
        <Setter Property="ShadowDepth" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tpf:ShadowElement.ShadowDepth), Mode=OneWay, FallbackValue=Depth0}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>
    <Style TargetType="tpf:Shadow" BasedOn="{StaticResource TPF.ShadowStyle}"/>

    <!-- ========== MaterialControl ========== -->
    <Style TargetType="tpf:MaterialControl" x:Key="TPF.MaterialControlStyle">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalContentAlignment, Mode=OneWay}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalContentAlignment, Mode=OneWay}"/>
        <Setter Property="RippleOpacity" Value="{tpf:ResourceLink Key=RippleOpacity}"/>
        <Setter Property="RippleBrush" Value="{tpf:ResourceLink Key=RippleBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:MaterialControl">
                    <tpf:SimplePanel Background="Transparent" Margin="{TemplateBinding BorderThickness}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Normal" To="MousePressed">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="{tpf:ResourceLink Key=RippleOpacity}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="MousePressed" To="MouseOut">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="MousePressed" To="Normal">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value="1" x:Name="PART_MousePressedToNormalScaleXKeyFrame"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value="1" x:Name="PART_MousePressedToNormalScaleYKeyFrame"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Ripple">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="{tpf:ResourceLink Key=RippleOpacity}"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.20" Value="{tpf:ResourceLink Key=RippleOpacity}"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value="0" EasingFunction="{animation:SineEase EasingMode=EaseOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="PART_Ripple" To="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="PART_Ripple" To="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Ripple" To="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MousePressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="PART_Ripple" To="1"/>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="PART_Ripple" To="1"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Ripple" To="{tpf:ResourceLink Key=RippleOpacity}"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOut">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="PART_Ripple" To="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="PART_Ripple" To="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Ripple" To="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="BackgroundElement" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" Panel.ZIndex="0"/>
                        <Canvas x:Name="RippleCanvas" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="{TemplateBinding RippleOpacity}" Panel.ZIndex="1">
                            <Ellipse x:Name="PART_Ripple" Fill="{TemplateBinding RippleBrush}" Width="{TemplateBinding RippleSize}" Height="{TemplateBinding RippleSize}" Opacity="0"
                                     Canvas.Left="{TemplateBinding RippleX}" Canvas.Top="{TemplateBinding RippleY}" RenderTransformOrigin="0.5 0.5">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform x:Name="PART_ScaleTransform" ScaleX="0" ScaleY="0"/>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Canvas>
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Panel.ZIndex="2"/>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsRippleOnTop" Value="True">
                            <Setter TargetName="RippleCanvas" Property="Panel.ZIndex" Value="3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:MaterialControl" BasedOn="{StaticResource TPF.MaterialControlStyle}"/>

    <!-- ========== FluentControl ========== -->
    <Style TargetType="tpf:FluentControl" x:Key="TPF.FluentControlStyle">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessToSpecificThicknessConverter}, ConverterParameter=0\,#\,0\,#}"/>
        <Setter Property="RippleBrush" Value="{StaticResource FluentRadialGradient}"/>
        <Setter Property="BorderGradient" Value="{StaticResource FluentBorderGradient}"/>
        <Setter Property="PressedGradient" Value="{StaticResource FluentPressedRadialGradient}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:FluentControl">
                    <tpf:SimplePanel Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="MouseIn" To="MousePressed">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="Opacity" FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.050"/>
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:1.0"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:2"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="RenderTransform.ScaleX" FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" EasingFunction="{animation:SineEase EasingMode=EaseOut}"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.080" Value=".3" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="2" EasingFunction="{animation:SineEase EasingMode=EaseOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="RenderTransform.ScaleY" FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" EasingFunction="{animation:SineEase EasingMode=EaseOut}"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.080" Value=".3" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="2" EasingFunction="{animation:SineEase EasingMode=EaseOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="MousePressed" To="MouseIn">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="Opacity" FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.220"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.450"/>
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.650"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="RenderTransform.ScaleX" FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.150" Value="2" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.450"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.500"/>
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.650" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="RenderTransform.ScaleY" FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.150" Value="2" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.450"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.500"/>
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.650" EasingFunction="{animation:SineEase EasingMode=EaseIn}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="Opacity" To="0" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="BorderBrush.Opacity" To="0" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MousePressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" Storyboard.TargetName="PART_Ripple" To="1"/>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" Storyboard.TargetName="PART_Ripple" To="1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseIn">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOut">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_Ripple" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.050"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="BorderBrush.Opacity" To="0" Duration="0:0:0.050"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Canvas x:Name="RippleCanvas" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="0">
                            <Ellipse x:Name="PART_Ripple" Fill="{TemplateBinding RippleBrush}" Width="{TemplateBinding RippleSize}" Height="{TemplateBinding RippleSize}" Opacity="0"
                                     Canvas.Left="{TemplateBinding RippleX}" Canvas.Top="{TemplateBinding RippleY}" RenderTransformOrigin="0.5 0.5">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform x:Name="PART_ScaleTransform" ScaleX="1" ScaleY="1"/>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Canvas>

                        <Border x:Name="ContentBorder" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderGradient}" Background="{x:Null}" Panel.ZIndex="1">
                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsRippleOnTop" Value="True">
                            <Setter TargetName="RippleCanvas" Property="Panel.ZIndex" Value="2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Ripple" Property="Fill" Value="{Binding PressedGradient, RelativeSource={RelativeSource AncestorType=tpf:FluentControl}}"/>
                        </Trigger>
                        <Trigger Property="FluentEffectMode" Value="Glow">
                            <Setter TargetName="PART_Ripple" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:FluentControl" BasedOn="{StaticResource TPF.FluentControlStyle}"/>

    <!-- ========== HighlightingTextBlock ========== -->
    <Style TargetType="tpf:HighlightingTextBlock" x:Key="TPF.HighlightingTextBlockStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HighlightingForeground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="HighlightingBackground" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
    </Style>
    <Style TargetType="tpf:HighlightingTextBlock" BasedOn="{StaticResource TPF.HighlightingTextBlockStyle}"/>

    <!-- ========== Divider ========== -->
    <Style TargetType="tpf:Divider" x:Key="TPF.DividerStyle">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="LineStroke" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0 4"/>
        <Setter Property="Padding" Value="10 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Divider">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" x:Name="Column0"/>
                            <ColumnDefinition Width="Auto" x:Name="Column1"/>
                            <ColumnDefinition Width="*" x:Name="Column2"/>
                        </Grid.ColumnDefinitions>

                        <Line Grid.Column="0" Stroke="{TemplateBinding LineStroke}" StrokeThickness="{TemplateBinding LineStrokeThickness}" StrokeDashArray="{TemplateBinding LineStrokeDashArray}"
                              Stretch="Fill" X2="1" VerticalAlignment="Center" StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>

                        <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" ContentSource="Content"/>

                        <Line Grid.Column="2" Stroke="{TemplateBinding LineStroke}" StrokeThickness="{TemplateBinding LineStrokeThickness}" StrokeDashArray="{TemplateBinding LineStrokeDashArray}"
                              Stretch="Fill" X2="1" VerticalAlignment="Center" StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Padding" Value="0"/>
                            <Setter TargetName="Column1" Property="Width" Value="0"/>
                        </Trigger>
                        <Trigger Property="HorizontalContentAlignment" Value="Left">
                            <Setter TargetName="Column0" Property="Width" Value="20"/>
                        </Trigger>
                        <Trigger Property="HorizontalContentAlignment" Value="Right">
                            <Setter TargetName="Column2" Property="Width" Value="20"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Margin" Value="4 0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="tpf:Divider">
                            <Line HorizontalAlignment="Center" Stroke="{TemplateBinding LineStroke}" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" StrokeThickness="{TemplateBinding LineStrokeThickness}"
                                  Y2="1" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="tpf:Divider" BasedOn="{StaticResource TPF.DividerStyle}"/>

    <!-- ========== Badge ========== -->
    <Style TargetType="tpf:Badge" x:Key="TPF.BadgeStyle">
        <Setter Property="MinWidth" Value="9"/>
        <Setter Property="MinHeight" Value="9"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="5 1"/>
        <Setter Property="CornerRadius" Value="9"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Badge">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Badge" BasedOn="{StaticResource TPF.BadgeStyle}"/>

    <!-- ========== Card ========== -->
    <Style TargetType="tpf:Card" x:Key="TPF.CardStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="tpf:ShadowElement.ShadowDepth" Value="Depth2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Card">
                    <tpf:SimplePanel>
                        <tpf:Shadow ShadowDepth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tpf:ShadowElement.ShadowDepth)}"
                                    Darken="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(tpf:ShadowElement.Darken)}"
                                    Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <tpf:ClipBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                            <ContentPresenter/>
                        </tpf:ClipBorder>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="tpf:ShadowElement.Darken" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Card" BasedOn="{StaticResource TPF.CardStyle}"/>

    <!-- ========== Shield ========== -->
    <Style TargetType="tpf:Shield" x:Key="TPF.ShieldStyle">
        <Setter Property="Height" Value="20"/>
        <Setter Property="ImageWidth" Value="20"/>
        <Setter Property="ImageHeight" Value="20"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=HeaderBrush}"/>
        <Setter Property="LabelForeground" Value="White"/>
        <Setter Property="LabelBackground" Value="#565656"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="4 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Shield">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.OpacityMask>
                            <VisualBrush Stretch="None">
                                <VisualBrush.Visual>
                                    <Border Background="White" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" CornerRadius="{TemplateBinding CornerRadius}"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Grid.OpacityMask>

                        <Border Grid.Column="0" Background="{TemplateBinding LabelBackground}">
                            <Grid Margin="{TemplateBinding Padding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Image Source="{TemplateBinding ImageSource}" Grid.Column="0" Margin="0 0 2 0" VerticalAlignment="Center" Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}"
                                       Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSource, Converter={StaticResource NullToVisibilityConverter}}"/>
                                <TextBlock Text="{TemplateBinding Label}" Foreground="{TemplateBinding LabelForeground}" Grid.Column="1" Margin="2 0 0 0" VerticalAlignment="Center"
                                           Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Label, Converter={StaticResource NullToVisibilityConverter}}"/>
                            </Grid>
                        </Border>
                        <Border Grid.Column="1" Background="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Shield" BasedOn="{StaticResource TPF.ShieldStyle}"/>

    <!-- ========== Button ========== -->
    <Style TargetType="tpf:Button" x:Key="TPF.ButtonStyle">
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Button">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="Content" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Button" BasedOn="{StaticResource TPF.ButtonStyle}"/>

    <!-- ========== ToggleSwitchButton ========== -->
    <converter:ToggleSwitchPositionConverter x:Key="ToggleSwitchPositionConverter"/>
    <Style TargetType="tpf:ToggleSwitchButton" x:Key="TPF.ToggleSwitchButtonStyle">
        <Setter Property="Height" Value="20"/>
        <Setter Property="TrackHeight" Value="20"/>
        <Setter Property="TrackWidth" Value="50"/>
        <Setter Property="SwitchHeight" Value="20"/>
        <Setter Property="SwitchWidth" Value="20"/>
        <Setter Property="Padding" Value="5 0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ToggleSwitchButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ContentPresenter x:Name="UncheckedContentPresenter" ContentSource="UncheckedContent" Grid.Column="0" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                        <tpf:SimplePanel SnapsToDevicePixels="True" Grid.Column="1">
                            <Border x:Name="TrackBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Height="{TemplateBinding TrackHeight}" Width="{TemplateBinding TrackWidth}"/>
                            <Border x:Name="CheckedTrackBackground" Background="{tpf:ResourceLink Key=SelectedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Height="{TemplateBinding TrackHeight}" Width="{TemplateBinding TrackWidth}" Opacity="0"/>
                            <Rectangle x:Name="AnimationHelper" Visibility="Collapsed" MinWidth="0"/>
                            <Rectangle x:Name="Switch" StrokeThickness="{TemplateBinding BorderThickness}" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}"
                                       HorizontalAlignment="Left" Height="{TemplateBinding SwitchHeight}" Width="{TemplateBinding SwitchWidth}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TranslateTransform Y="0">
                                        <TranslateTransform.X>
                                            <MultiBinding Converter="{StaticResource ToggleSwitchPositionConverter}">
                                                <Binding Path="MinWidth" ElementName="AnimationHelper"/>
                                                <Binding Path="TrackWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                <Binding Path="SwitchWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            </MultiBinding>
                                        </TranslateTransform.X>
                                    </TranslateTransform>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </tpf:SimplePanel>

                        <ContentPresenter x:Name="CheckedContentPresenter" ContentSource="CheckedContent" Grid.Column="2" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Switch" Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Switch" Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimationHelper" Storyboard.TargetProperty="MinWidth">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedTrackBackground" Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimationHelper" Storyboard.TargetProperty="MinWidth">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedTrackBackground" Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="ContentPosition" Value="Both">
                            <Setter TargetName="UncheckedContentPresenter" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Grid.Column" Value="2"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ContentPosition" Value="Left">
                            <Setter TargetName="UncheckedContentPresenter" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Grid.Column" Value="0"/>
                        </Trigger>
                        <Trigger Property="ContentPosition" Value="Right">
                            <Setter TargetName="UncheckedContentPresenter" Property="Grid.Column" Value="2"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Grid.Column" Value="2"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ContentPosition" Value="Left"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ContentPosition" Value="Right"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ContentPosition" Value="Left"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ContentPosition" Value="Right"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckedContentPresenter" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ToggleSwitchButton" BasedOn="{StaticResource TPF.ToggleSwitchButtonStyle}"/>

    <!-- ========== PathButton ========== -->
    <Style TargetType="tpf:PathButton" x:Key="TPF.PathButtonStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Stroke" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="Fill" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:PathButton">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Path Grid.Column="0" Data="{TemplateBinding Data}" Stroke="{TemplateBinding Stroke}" Fill="{TemplateBinding Fill}"
                                  Stretch="{TemplateBinding Stretch}" StrokeThickness="{TemplateBinding StrokeThickness}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="Content" Grid.Column="1" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                            <Setter Property="Fill" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                            <Setter Property="Stroke" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                            <Setter Property="Fill" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                            <Setter Property="Stroke" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                            <Setter Property="Fill" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                            <Setter Property="Stroke" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:PathButton" BasedOn="{StaticResource TPF.PathButtonStyle}"/>

    <!-- ========== HyperlinkButton ========== -->
    <Style TargetType="tpf:HyperlinkButton" x:Key="TPF.HyperlinkButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=HyperlinkBrush}"/>
        <Setter Property="VisitedForeground" Value="{tpf:ResourceLink Key=HyperlinkVisitedBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:HyperlinkButton">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Hyperlink Name="PART_Hyperlink" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}"
                                       FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Cursor="Hand" TextDecorations="{x:Null}"
                                       TargetName="{TemplateBinding TargetName}" NavigateUri="{TemplateBinding NavigateUri}" Foreground="{TemplateBinding Foreground}">
                                <ContentPresenter Name="ContentPresenter" ContentSource="Content"/>
                            </Hyperlink>
                        </TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_Hyperlink" Value="True">
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextDecorations" TargetName="PART_Hyperlink" Value="Underline"/>
                        </Trigger>
                        <Trigger Property="IsVisited" Value="True">
                            <Setter Property="Foreground" TargetName="PART_Hyperlink" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VisitedForeground}"/>
                            <Setter Property="TextDecorations" TargetName="PART_Hyperlink" Value="Underline"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" SourceName="PART_Hyperlink" Value="True"/>
                                <Condition Property="IsVisited" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="PART_Hyperlink" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:HyperlinkButton" BasedOn="{StaticResource TPF.HyperlinkButtonStyle}"/>

    <!-- ========== DropDownButton ========== -->
    <Style TargetType="tpf:DropDownButton" x:Key="TPF.DropDownButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:DropDownButton">
                    <tpf:SimplePanel>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter x:Name="Content" Grid.Column="0" TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" RecognizesAccessKey="True"/>
                                <Path x:Name="Symbol" Data="M0,0 L6,0 3,4 Z" Fill="{tpf:ResourceLink Key=GlyphBrush}" IsHitTestVisible="false" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5 3"/>
                            </Grid>
                        </Border>
                        <Popup IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                            <Border BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                    MinWidth="{TemplateBinding DropDownMinWidth}" MinHeight="{TemplateBinding DropDownMinHeight}" 
                                    Width="{TemplateBinding DropDownWidth}" Height="{TemplateBinding DropDownHeight}"
                                    MaxWidth="{TemplateBinding DropDownMaxWidth}" MaxHeight="{TemplateBinding DropDownMaxHeight}">
                                <ContentControl Content="{TemplateBinding DropDownContent}" ContentTemplate="{TemplateBinding DropDownContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            </Border>
                        </Popup>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                            <Setter Property="Fill" TargetName="Symbol" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                            <Setter Property="Fill" TargetName="Symbol" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:DropDownButton" BasedOn="{StaticResource TPF.DropDownButtonStyle}"/>

    <!-- ========== SplitButton ========== -->
    <Style TargetType="tpf:SplitButton" x:Key="TPF.SplitButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ButtonStyle" Value="{StaticResource WPF.ButtonStyle}"/>
        <Setter Property="ToggleButtonStyle" Value="{StaticResource WPF.ToggleButtonStyle}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4 3"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:SplitButton">
                    <tpf:SimplePanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Button x:Name="PART_Button" Grid.Column="0" IsTabStop="False" Focusable="False" Padding="{TemplateBinding Padding}" Style="{TemplateBinding ButtonStyle}"
                                    Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    tpf:BorderElement.CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=#\,0\,0\,#}"
                                    BorderThickness="{TemplateBinding BorderThickness}" FontSize="{TemplateBinding FontSize}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ToggleButton Grid.Column="1" IsTabStop="False" Focusable="False" Margin="-1 0 0 0" MinWidth="14" MinHeight="14" Style="{TemplateBinding ToggleButtonStyle}"
                                          Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                          tpf:BorderElement.CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=0\,#\,#\,0}"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Path Data="M0,0 L6,0 3,4 Z" Fill="{tpf:ResourceLink Key=GlyphBrush}" IsHitTestVisible="false" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5 3"/>
                            </ToggleButton>

                            <Border x:Name="ButtonMouseOverBorder" Grid.Column="0" BorderThickness="1" IsHitTestVisible="False" Background="{x:Null}" BorderBrush="{tpf:ResourceLink Key=MouseOverAccentBrush}" Visibility="Collapsed"
                                    CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=#\,0\,0\,#}"/>
                            <Border x:Name="ToggleButtonMouseOverBorder" Grid.Column="1" Margin="-1 0 0 0" BorderThickness="1" IsHitTestVisible="False" Background="{x:Null}" BorderBrush="{tpf:ResourceLink Key=MouseOverAccentBrush}" Visibility="Collapsed"
                                    CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=0\,#\,#\,0}"/>
                        </Grid>

                        <Border x:Name="FocusVisual" IsHitTestVisible="False" Background="{x:Null}" Visibility="Collapsed"
                                BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{tpf:ResourceLink Key=MouseOverAccentBrush}" CornerRadius="{TemplateBinding CornerRadius}"/>
                        
                        <Popup IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                            <Border BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                    MinWidth="{TemplateBinding DropDownMinWidth}" MinHeight="{TemplateBinding DropDownMinHeight}" 
                                    Width="{TemplateBinding DropDownWidth}" Height="{TemplateBinding DropDownHeight}"
                                    MaxWidth="{TemplateBinding DropDownMaxWidth}" MaxHeight="{TemplateBinding DropDownMaxHeight}">
                                <ContentControl Content="{TemplateBinding DropDownContent}" ContentTemplate="{TemplateBinding DropDownContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            </Border>
                        </Popup>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="ButtonMouseOverBorder" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="ToggleButtonMouseOverBorder" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="FocusVisual" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="PART_Button" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="Visibility" TargetName="ButtonMouseOverBorder" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="ToggleButtonMouseOverBorder" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:SplitButton" BasedOn="{StaticResource TPF.SplitButtonStyle}"/>

    <!-- ========== CalendarButton ========== -->
    <Style TargetType="calendar:CalendarButton" x:Key="TPF.CalendarButtonStyle">
        <Setter Property="MinWidth" Value="22"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="calendar:CalendarButton">
                    <tpf:SimplePanel Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled"/>
                                <VisualState x:Name="NotFromCurrentView"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Selected"/>
                                <VisualState x:Name="Unselected"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ButtonType">
                                <VisualState x:Name="Day"/>
                                <VisualState x:Name="Month"/>
                                <VisualState x:Name="Year"/>
                                <VisualState x:Name="Decade"/>
                                <VisualState x:Name="DayOfWeek">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="BackgroundBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="WeekNumber">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Foreground" Storyboard.TargetName="Content">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="BackgroundBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="BackgroundBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>
                        <ContentControl x:Name="Content" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}" Foreground="{TemplateBinding Foreground}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                            <Setter Property="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                            <Setter Property="Background" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFromCurrentView" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="calendar:CalendarButton" BasedOn="{StaticResource TPF.CalendarButtonStyle}"/>
    <!-- ========== CalendarView ========== -->
    <Style TargetType="calendar:CalendarView" x:Key="TPF.CalendarViewStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1 0 1 1"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="calendar:CalendarView">
                    <Grid Background="Transparent" Margin="-1 -1 0 0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="{TemplateBinding HeaderVisibility}">
                            <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>

                        <ItemsPresenter Grid.Row="1" Margin="2 1 1 1"/>
                        <Border Grid.RowSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Rectangle Name="MinDesiredSize" Grid.Row="1" Width="197" Height="160"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="calendar:CalendarView" x:Key="TPF.CalendarMonthViewStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1 0 1 1"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="calendar:CalendarView">
                    <Grid Background="Transparent" Margin="-1 -1 0 0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="{TemplateBinding HeaderVisibility}">
                            <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>

                        <Grid Grid.Row="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="7*"/>
                            </Grid.ColumnDefinitions>

                            <Border Grid.Column="0" BorderBrush="{tpf:ResourceLink Key=BorderBrush}" BorderThickness="0 0 1 0" Visibility="{TemplateBinding HideFirstColumn, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"/>
                        </Grid>

                        <ItemsPresenter Grid.Row="1" Margin="2 1 1 1"/>
                        <Border Grid.RowSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Rectangle Name="MinDesiredSize" Grid.Row="1" Width="197" Height="160"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="calendar:CalendarView" BasedOn="{StaticResource TPF.CalendarViewStyle}"/>
    <!-- ========== Calendar ========== -->
    <Style TargetType="Button" x:Key="TPF.CalendarHeaderButtonStyle">
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <tpf:SimplePanel>
                        <TextBlock x:Name="Text" Text="{TemplateBinding Content}" Margin="0 1" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}"/>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Text" Property="TextDecorations" Value="Underline"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Text" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="TPF.CalendarMoveLeftButtonStyle">
        <Setter Property="MinWidth" Value="22"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <tpf:SimplePanel>
                        <Rectangle Name="BackgroundElement" Fill="Transparent"/>
                        <Path x:Name="Icon" Data="M0,3 L4,0 4,6 z" Width="4" Height="6" Margin="0 1" Fill="{TemplateBinding Foreground}"/>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundElement" Property="Fill" Value="#55CCCEDB"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BackgroundElement" Property="Fill" Value="#55CCCEDB"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Icon" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="TPF.CalendarMoveRightButtonStyle">
        <Setter Property="MinWidth" Value="22"/>
        <Setter Property="MinHeight" Value="22"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <tpf:SimplePanel>
                        <Rectangle Name="BackgroundElement" Fill="Transparent"/>
                        <Path x:Name="Icon" Data="M0,0 L4,3 0,6 z" Width="4" Height="6" Margin="0 1" Fill="{TemplateBinding Foreground}"/>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundElement" Property="Fill" Value="#55CCCEDB"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BackgroundElement" Property="Fill" Value="#55CCCEDB"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Icon" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Calendar" x:Key="TPF.CalendarStyle">
        <Setter Property="Columns" Value="1"/>
        <Setter Property="Rows" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="TabIndex" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="HeaderForeground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="HeaderBackground" Value="{tpf:ResourceLink Key=HeaderBrush}"/>
        <Setter Property="MonthViewStyle" Value="{StaticResource TPF.CalendarMonthViewStyle}"/>
        <Setter Property="YearViewStyle" Value="{StaticResource TPF.CalendarViewStyle}"/>
        <Setter Property="DecadeViewStyle" Value="{StaticResource TPF.CalendarViewStyle}"/>
        <Setter Property="CenturyViewStyle" Value="{StaticResource TPF.CalendarViewStyle}"/>
        <Setter Property="DayButtonStyle" Value="{StaticResource TPF.CalendarButtonStyle}"/>
        <Setter Property="MonthButtonStyle" Value="{StaticResource TPF.CalendarButtonStyle}"/>
        <Setter Property="YearButtonStyle" Value="{StaticResource TPF.CalendarButtonStyle}"/>
        <Setter Property="DecadeButtonStyle" Value="{StaticResource TPF.CalendarButtonStyle}"/>
        <Setter Property="MonthViewPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <tpf:UniformGrid IgnoreCollapsedChildren="False" FirstColumn="1" Rows="7" Columns="8"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="YearViewPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <tpf:UniformGrid IgnoreCollapsedChildren="False" Rows="3" Columns="4"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DecadeViewPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <tpf:UniformGrid IgnoreCollapsedChildren="False" Rows="3" Columns="4"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="CenturyViewPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <tpf:UniformGrid IgnoreCollapsedChildren="False" Rows="3" Columns="4"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Calendar">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border Grid.RowSpan="2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"/>

                        <Border Grid.Row="0" Background="{TemplateBinding HeaderBackground}" Visibility="{TemplateBinding HeaderVisibility}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Button x:Name="PART_MoveLeftButton" Grid.Column="0" Foreground="{TemplateBinding HeaderForeground}" Style="{StaticResource TPF.CalendarMoveLeftButtonStyle}"/>
                                <Button x:Name="PART_HeaderButton" Grid.Column="1" Foreground="{TemplateBinding HeaderForeground}" Style="{StaticResource TPF.CalendarHeaderButtonStyle}"/>
                                <Button x:Name="PART_MoveRightButton" Grid.Column="2" Foreground="{TemplateBinding HeaderForeground}" Style="{StaticResource TPF.CalendarMoveRightButtonStyle}"/>
                            </Grid>
                        </Border>

                        <tpf:SimplePanel Grid.Row="1" Margin="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessToSpecificThicknessConverter}, ConverterParameter=#\,1\,#\,#}">
                            <tpf:UniformGrid x:Name="PART_MonthViewsPanel" Rows="{TemplateBinding Rows}" Columns="{TemplateBinding Columns}"/>
                            <tpf:UniformGrid x:Name="PART_YearViewsPanel" Rows="{TemplateBinding Rows}" Columns="{TemplateBinding Columns}" Visibility="Collapsed"/>
                            <tpf:UniformGrid x:Name="PART_DecadeViewsPanel" Rows="{TemplateBinding Rows}" Columns="{TemplateBinding Columns}" Visibility="Collapsed"/>
                            <tpf:UniformGrid x:Name="PART_CenturyViewsPanel" Rows="{TemplateBinding Rows}" Columns="{TemplateBinding Columns}" Visibility="Collapsed"/>
                        </tpf:SimplePanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Calendar" BasedOn="{StaticResource TPF.CalendarStyle}"/>

    <!-- ========== Calculator ========== -->
    <Style TargetType="tpf:Calculator" x:Key="TPF.CalculatorStyle">
        <Setter Property="MinWidth" Value="216"/>
        <Setter Property="MinHeight" Value="256"/>
        <Setter Property="MaxWidth" Value="216"/>
        <Setter Property="MaxHeight" Value="256"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Calculator">
                    <tpf:SimplePanel Background="Transparent" SnapsToDevicePixels="True">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Grid Margin="5">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid MinHeight="54">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <Border Grid.ColumnSpan="2" Grid.RowSpan="2" BorderThickness="1" BorderBrush="{tpf:ResourceLink Key=AccentBrush}" Background="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
                                <TextBlock Text="M" Margin="4 5 0 0" VerticalAlignment="Top" Foreground="{TemplateBinding Foreground}" Visibility="{TemplateBinding MemoryValue, Converter={StaticResource NullToVisibilityConverter}}"/>
                                <TextBlock Grid.ColumnSpan="2" Grid.Row="1" VerticalAlignment="Bottom" HorizontalAlignment="Right" TextAlignment="Right" FontSize="20"
                                           Foreground="{TemplateBinding Foreground}" Margin="0 -4 8 6" Text="{TemplateBinding DisplayedValue}" ToolTip="{TemplateBinding DisplayedValue}"/>
                                <TextBlock TextAlignment="Right" Grid.Column="1" HorizontalAlignment="Right" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" Margin="4 3 5 0" Text="{TemplateBinding History}"/>
                            </Grid>

                            <Grid Grid.Row="1" Margin="0 5 0 0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.Resources>
                                    <Style TargetType="Button" BasedOn="{StaticResource WPF.ButtonStyle}">
                                        <Setter Property="IsTabStop" Value="False"/>
                                        <Setter Property="MinHeight" Value="25"/>
                                        <Setter Property="MinWidth" Value="37"/>
                                        <Setter Property="Margin" Value="0 5 3 0"/>
                                    </Style>
                                </Grid.Resources>

                                <Button Content="MC" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.MemoryClear}"/>
                                <Button Content="MR" Grid.Column="1" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.MemoryRead}"/>
                                <Button Content="MS" Grid.Column="2" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.MemoryStore}"/>
                                <Button Content="M+" Grid.Column="3" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.MemoryPlus}"/>
                                <Button Content="M-" Grid.Column="4" BorderThickness="0" Margin="0 5 0 0" Command="{x:Static tpf:CalculatorCommands.MemoryMinus}"/>

                                <Button Content="←" Grid.Row="1" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.Delete}"/>
                                <Button Content="CE" Grid.Row="1" Grid.Column="1" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.Clear}"/>
                                <Button Content="C" Grid.Row="1" Grid.Column="2" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.ClearAll}"/>
                                <Button Content="±" Grid.Row="1" Grid.Column="3" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.ExecuteFunction}" CommandParameter="{x:Static tpf:CalculatorOperations.Negate}"/>
                                <Button Content="√" Grid.Row="1" Grid.Column="4" BorderThickness="0" Margin="0 5 0 0" Command="{x:Static tpf:CalculatorCommands.ExecuteFunction}" CommandParameter="{x:Static tpf:CalculatorOperations.SquareRoot}"/>

                                <Button Content="7" Grid.Row="2" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="7"/>
                                <Button Content="8" Grid.Row="2" Grid.Column="1" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="8"/>
                                <Button Content="9" Grid.Row="2" Grid.Column="2" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="9"/>
                                <Button Content="/" Grid.Row="2" Grid.Column="3" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.AddOperator}" CommandParameter="{x:Static tpf:CalculatorOperations.Divide}"/>
                                <Button Content="%" Grid.Row="2" Grid.Column="4" BorderThickness="0" Margin="0 5 0 0" Command="{x:Static tpf:CalculatorCommands.ExecuteFunction}" CommandParameter="{x:Static tpf:CalculatorOperations.Percent}"/>

                                <Button Content="4" Grid.Row="3" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="4"/>
                                <Button Content="5" Grid.Row="3" Grid.Column="1" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="5"/>
                                <Button Content="6" Grid.Row="3" Grid.Column="2" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="6"/>
                                <Button Content="*" Grid.Row="3" Grid.Column="3" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.AddOperator}" CommandParameter="{x:Static tpf:CalculatorOperations.Multiply}"/>
                                <Button Content="1/x" Grid.Row="3" Grid.Column="4" BorderThickness="0" Margin="0 5 0 0" Command="{x:Static tpf:CalculatorCommands.ExecuteFunction}" CommandParameter="{x:Static tpf:CalculatorOperations.Reciprocal}"/>

                                <Button Content="1" Grid.Row="4" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="1"/>
                                <Button Content="2" Grid.Row="4" Grid.Column="1" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="2"/>
                                <Button Content="3" Grid.Row="4" Grid.Column="2" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="3"/>
                                <Button Content="-" Grid.Row="4" Grid.Column="3" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.AddOperator}" CommandParameter="{x:Static tpf:CalculatorOperations.Subtract}"/>
                                <Button Content="=" Grid.Row="4" Grid.RowSpan="2" Grid.Column="4" Margin="0 5 0 0" Command="{x:Static tpf:CalculatorCommands.FinishCalculation}"/>

                                <Button Content="0" Grid.Row="5" Grid.ColumnSpan="2" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="0"/>
                                <Button Content="{TemplateBinding DecimalSeparator}" Grid.Row="5" Grid.Column="2" FontWeight="Bold" Command="{x:Static tpf:CalculatorCommands.UpdateInput}" CommandParameter="{TemplateBinding DecimalSeparator}"/>
                                <Button Content="+" Grid.Row="5" Grid.Column="3" BorderThickness="0" Command="{x:Static tpf:CalculatorCommands.AddOperator}" CommandParameter="{x:Static tpf:CalculatorOperations.Add}"/>
                            </Grid>
                        </Grid>
                    </tpf:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Calculator" BasedOn="{StaticResource TPF.CalculatorStyle}"/>

    <!-- ========== Notification ========== -->
    <Style TargetType="Button" x:Key="TPF.NotificationButtonStyle">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="12 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <tpf:SimplePanel>
                        <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" Focusable="False"/>
                        <Border x:Name="OverlayBorder" BorderThickness="0" Opacity="0.3" SnapsToDevicePixels="True" Focusable="False"/>
                        <ContentPresenter Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OverlayBorder" Property="Background" Value="#333333"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OverlayBorder" Property="Background" Value="#666666"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="OverlayBorder" Property="Background" Value="#FFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Notification" x:Key="TPF.NotificationStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="AccentBrush" Value="{tpf:ResourceLink Key=HeaderBrush}"/>
        <Setter Property="ButtonForeground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="BadgeBackground" Value="{tpf:ResourceLink Key=HeaderBrush}"/>
        <Setter Property="BadgeForeground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Notification">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseLayoutRounding="True" SnapsToDevicePixels="True" Focusable="False">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <ContentControl Content="{TemplateBinding AdditionalContentTop}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            <ContentControl Content="{TemplateBinding AdditionalContentBottom}" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            <ContentControl Content="{TemplateBinding AdditionalContentLeft}" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            <ContentControl Content="{TemplateBinding AdditionalContentRight}" Grid.Row="1" Grid.Column="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>

                            <Grid Grid.Row="1" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <Grid Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Text="{TemplateBinding BadgeText}" Grid.Row="1" Margin="10 2 0 2" Padding="4 2" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{TemplateBinding BadgeVisibility}"
                                               FontSize="11" FontWeight="Bold" Background="{TemplateBinding BadgeBackground}" Foreground="{TemplateBinding BadgeForeground}"/>
                                </Grid>

                                <Grid Grid.Column="1" Margin="10 8" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Text="{TemplateBinding Header}" Grid.Row="0" Margin="0 0 8 0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                               FontSize="16" Foreground="{TemplateBinding Foreground}" TextWrapping="Wrap" Visibility="{TemplateBinding HeaderVisibility}"/>
                                    <TextBlock Text="{TemplateBinding Message}" Grid.Row="1" Margin="0 0 8 0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                               Foreground="{TemplateBinding Foreground}" TextWrapping="Wrap" Visibility="{TemplateBinding MessageVisibility}"/>
                                </Grid>
                            </Grid>

                            <ItemsControl ItemsSource="{TemplateBinding Buttons}" Grid.Row="1" Grid.Column="2">
                                <ItemsControl.Resources>
                                    <Style TargetType="Button" BasedOn="{StaticResource TPF.NotificationButtonStyle}">
                                        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=tpf:Notification}, Path=ButtonForeground}"/>
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=tpf:Notification}, Path=ButtonBackground}"/>
                                    </Style>
                                </ItemsControl.Resources>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>

                            <ContentControl Content="{TemplateBinding OverlayContent}" Grid.Row="0" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Notification" BasedOn="{StaticResource TPF.NotificationStyle}"/>
    <Style TargetType="tpf:NotificationContainer" x:Key="TPF.NotificationContainerStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:NotificationContainer">
                    <Border Margin="12 0 12 12" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" UseLayoutRounding="True">
                        <tpf:SimplePanel>
                            <tpf:Shadow ShadowDepth="Depth3" Background="{tpf:ResourceLink Key=PrimaryBrush}"/>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </tpf:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:NotificationContainer" BasedOn="{StaticResource TPF.NotificationContainerStyle}"/>

    <!-- ========== Tile ========== -->
    <Style TargetType="tpf:Tile" x:Key="TPF.TileStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="100"/>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Tile">
                    <tpf:SimplePanel>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <tpf:SimplePanel>
                                <ContentPresenter Focusable="False" RecognizesAccessKey="True"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Label HorizontalAlignment="{TemplateBinding HorizontalTitleAlignment}" VerticalAlignment="{TemplateBinding VerticalTitleAlignment}" Foreground="{TemplateBinding Foreground}">
                                    <AccessText FontSize="{TemplateBinding TitleFontSize}" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Title}" TextWrapping="Wrap"/>
                                </Label>
                            </tpf:SimplePanel>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="0.98" ScaleY="0.98"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Tile" BasedOn="{StaticResource TPF.TileStyle}"/>

    <!-- ========== ProgressBar ========== -->
    <Style TargetType="tpf:ProgressBar" x:Key="TPF.ProgressBarStyle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="ProgressBrush" Value="{tpf:ResourceLink Key=ProgressBarBrush}"/>
        <Setter Property="SecondaryProgressBrush" Value="{tpf:ResourceLink Key=SecondaryProgressBarBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ProgressBar">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Canvas x:Name="PART_SegmentsPanel" Grid.Row="1"/>

                        <ContentPresenter x:Name="Content" Grid.Row="1" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ContentPosition" Value="Above">
                            <Setter Property="Grid.Row" TargetName="Content" Value="0"/>
                        </Trigger>
                        <Trigger Property="ContentPosition" Value="Center">
                            <Setter Property="Grid.Row" TargetName="Content" Value="1"/>
                        </Trigger>
                        <Trigger Property="ContentPosition" Value="Below">
                            <Setter Property="Grid.Row" TargetName="Content" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ProgressBar" BasedOn="{StaticResource TPF.ProgressBarStyle}"/>
    <Style TargetType="tpf:ProgressBar" x:Key="BusyIndicatorProgressBarStyle">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Maximum" Value="100"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#00A9DD"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ProgressBar">
                    <Grid HorizontalAlignment="Center" Width="180">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever" AutoReverse="true">
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Ellipse1" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Ellipse2" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Ellipse3" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Ellipse4" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DeterminateProgressBar" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.1" Value="70"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="72" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="174"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.1" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="1" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse2" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="80"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="82" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="174"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="1" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse3" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="90"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="92" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.8" Value="174"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse3" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.8" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="100"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="102" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="174"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Ellipse4" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1" EasingFunction="{animation:BackEase Amplitude=2, EasingMode=EaseIn}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Ellipse Name="Ellipse1" Width="6" Height="6" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" Visibility="Collapsed" Fill="{TemplateBinding Foreground}">
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <Ellipse Name="Ellipse2" Width="6" Height="6" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" Visibility="Collapsed" Fill="{TemplateBinding Foreground}">
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <Ellipse Name="Ellipse3" Width="6" Height="6" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" Visibility="Collapsed" Fill="{TemplateBinding Foreground}">
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <Ellipse Name="Ellipse4" Width="6" Height="6" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" Visibility="Collapsed" Fill="{TemplateBinding Foreground}">
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <tpf:SimplePanel x:Name="DeterminateProgressBar" Height="10" Background="Transparent">
                            <Canvas x:Name="PART_SegmentsPanel"/>
                        </tpf:SimplePanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ProgressButton ========== -->
    <Style TargetType="tpf:ProgressButton" x:Key="TPF.ProgressButtonStyle">
        <Setter Property="Padding" Value="1"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="ProgressBrush" Value="{tpf:ResourceLink Key=ProgressBarBrush}"/>
        <Setter Property="SecondaryProgressBrush" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ProgressButton">
                    <tpf:SimplePanel>
                        <tpf:ProgressBar x:Name="ProgressBar" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                         Foreground="{TemplateBinding Foreground}" ProgressBrush="{TemplateBinding ProgressBrush}" SecondaryProgressBrush="{TemplateBinding SecondaryProgressBrush}"
                                         CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" IsIndeterminate="{TemplateBinding IsIndeterminate}" Height="NaN"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Content="{TemplateBinding Content}" Progress="{TemplateBinding Progress}" SecondaryProgress="{TemplateBinding SecondaryProgress}" Focusable="False"/>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ProgressBar" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="ProgressBar" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="Foreground" TargetName="ProgressBar" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="ProgressBar" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="ProgressBar" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="Foreground" TargetName="ProgressBar" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="ProgressBar" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="ProgressBar" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ProgressButton" BasedOn="{StaticResource TPF.ProgressButtonStyle}"/>

    <!-- ========== StepProgressBar ========== -->
    <tpf:StepItemIndicatorTemplateSelector x:Key="StepItemIndicatorTemplateSelector">
        <tpf:StepItemIndicatorTemplateSelector.CompleteTemplate>
            <DataTemplate>
                <tpf:SimplePanel>
                    <Rectangle Width="24" Height="24" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{tpf:ResourceLink Key=SelectedBrush}" Stroke="{tpf:ResourceLink Key=SelectedBrush}"/>
                    <Path Width="13" Height="9" Data="M0,4 L2,6 7,0 7.5,0.5 2,7 -0.5,4.5 z" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill"
                                      Fill="{tpf:ResourceLink Key=SelectedTextBrush}" Stroke="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                </tpf:SimplePanel>
            </DataTemplate>
        </tpf:StepItemIndicatorTemplateSelector.CompleteTemplate>
        <tpf:StepItemIndicatorTemplateSelector.IndeterminateTemplate>
            <DataTemplate>
                <Rectangle Width="24" Height="24" Fill="{tpf:ResourceLink Key=PrimaryBrush}" Stroke="{tpf:ResourceLink Key=SelectedBrush}" StrokeThickness="4"/>
            </DataTemplate>
        </tpf:StepItemIndicatorTemplateSelector.IndeterminateTemplate>
        <tpf:StepItemIndicatorTemplateSelector.InactiveTemplate>
            <DataTemplate>
                <Rectangle Width="24" Height="24" Fill="{tpf:ResourceLink Key=PrimaryBrush}" Stroke="{tpf:ResourceLink Key=BorderBrush}"/>
            </DataTemplate>
        </tpf:StepItemIndicatorTemplateSelector.InactiveTemplate>
    </tpf:StepItemIndicatorTemplateSelector>
    <Style TargetType="tpf:StepProgressBar" x:Key="TPF.StepProgressBarStyle">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="ConnectorBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="ConnectorProgressBrush" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <tpf:StepProgressBarPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IndicatorTemplateSelector" Value="{StaticResource StepItemIndicatorTemplateSelector}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:StepProgressBar">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:StepProgressBar" BasedOn="{StaticResource TPF.StepProgressBarStyle}"/>
    <!-- ========== StepItem ========== -->
    <ControlTemplate TargetType="tpf:StepItem" x:Key="TPF.HorizontalStepItemTemplate">
        <Grid x:Name="Root" Margin="{TemplateBinding ItemSpacing, Converter={StaticResource DoubleToThicknessConverter}, ConverterParameter=-#\,0\,0\,0}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Rectangle Grid.Column="0" Height="1" Width="{TemplateBinding ItemSpacing}"/>
            <Rectangle Grid.Column="2" Height="1" Width="{TemplateBinding ItemSpacing}"/>

            <ContentPresenter ContentSource="SecondaryContent" Grid.Row="0" Grid.ColumnSpan="3" Margin="0 5 0 10" VerticalAlignment="Center" HorizontalAlignment="Center"/>

            <ContentPresenter x:Name="PART_Indicator" Content="{Binding}" ContentTemplate="{TemplateBinding IndicatorTemplate}" Height="{TemplateBinding IndicatorHeight}" Width="{TemplateBinding IndicatorWidth}"
                              HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="1" Grid.Column="1" Panel.ZIndex="2"/>
            <tpf:ProgressBar x:Name="NextStepProgressBar" Grid.Row="1" Grid.Column="2" Panel.ZIndex="1" HorizontalAlignment="Center" VerticalAlignment="Center"
                             Width="{TemplateBinding ItemSpacing}" Height="{TemplateBinding ConnectorThickness}" MinWidth="1" MinHeight="1"
                             Minimum="0" Maximum="100" Progress="{TemplateBinding Progress}" BorderThickness="0"
                             Background="{TemplateBinding ConnectorBrush}" ProgressBrush="{TemplateBinding ConnectorProgressBrush}"/>

            <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" Margin="0 10 0 5" VerticalAlignment="Center" HorizontalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource IsFirstItemConverter}}">
                <Setter TargetName="Root" Property="Margin" Value="0"/>
            </DataTrigger>
            <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource IsLastItemConverter}}">
                <Setter TargetName="NextStepProgressBar" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="tpf:StepItem" x:Key="TPF.VerticalStepItemTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <ContentPresenter ContentSource="SecondaryContent" Grid.Column="0" Margin="5 0 10 0" VerticalAlignment="Top" HorizontalAlignment="Center"/>

            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <ContentPresenter x:Name="PART_Indicator" Content="{Binding}" ContentTemplate="{TemplateBinding IndicatorTemplate}" Height="{TemplateBinding IndicatorHeight}" Width="{TemplateBinding IndicatorWidth}"
                                  HorizontalAlignment="Center" VerticalAlignment="Center" Panel.ZIndex="2"/>
                <tpf:ProgressBar x:Name="NextStepProgressBar" Grid.Row="1" Panel.ZIndex="1" HorizontalAlignment="Center" VerticalAlignment="Center"
                                 Width="{TemplateBinding ItemSpacing}" Height="{TemplateBinding ConnectorThickness}" MinWidth="1" MinHeight="1"
                                 Minimum="0" Maximum="100" Progress="{TemplateBinding Progress}" BorderThickness="0"
                                 Background="{TemplateBinding ConnectorBrush}" ProgressBrush="{TemplateBinding ConnectorProgressBrush}">
                    <tpf:ProgressBar.LayoutTransform>
                        <RotateTransform Angle="90"/>
                    </tpf:ProgressBar.LayoutTransform>
                </tpf:ProgressBar>
            </Grid>

            <ContentPresenter Grid.Column="2" Margin="10 0 5 0" VerticalAlignment="Top" HorizontalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource IsLastItemConverter}}">
                <Setter TargetName="NextStepProgressBar" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="tpf:StepItem" x:Key="TPF.StepItemStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="ConnectorBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="ConnectorProgressBrush" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
        <Setter Property="Template" Value="{StaticResource TPF.HorizontalStepItemTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource TPF.VerticalStepItemTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="tpf:StepItem" BasedOn="{StaticResource TPF.StepItemStyle}"/>

    <!-- ========== BusyIndicator ========== -->
    <Style TargetType="tpf:BusyIndicator" x:Key="TPF.BusyIndicatorStyle">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="OverlayStyle">
            <Setter.Value>
                <Style TargetType="Rectangle">
                    <Setter Property="Fill" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                    <Setter Property="Opacity" Value="0.1"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ProgressBarStyle" Value="{StaticResource BusyIndicatorProgressBarStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:BusyIndicator">
                    <tpf:SimplePanel>
                        <ContentControl x:Name="Content" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsTabStop="False" Focusable="False"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Rectangle x:Name="Overlay" Style="{TemplateBinding OverlayStyle}" Visibility="Collapsed"/>
                        <Border x:Name="Indicator" Visibility="Collapsed" VerticalAlignment="Center">
                            <StackPanel>
                                <tpf:ProgressBar Style="{TemplateBinding ProgressBarStyle}" Progress="{TemplateBinding ProgressBarValue}" IsIndeterminate="{TemplateBinding IsIndeterminate}"/>
                                <ContentPresenter Content="{TemplateBinding BusyContent}" ContentTemplate="{TemplateBinding BusyContentTemplate}" HorizontalAlignment="Center"/>
                            </StackPanel>
                        </Border>
                    </tpf:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsBusy" Value="True">
                            <Setter TargetName="Content" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsBusyContentVisible" Value="True">
                            <Setter TargetName="Overlay" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Indicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:BusyIndicator" BasedOn="{StaticResource TPF.BusyIndicatorStyle}"/>

    <!-- ========== RadialProgressBar ========== -->
    <Style TargetType="tpf:RadialProgressBar" x:Key="TPF.RadialProgressBarStyle">
        <Setter Property="Maximum" Value="100"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="ProgressBrush" Value="{tpf:ResourceLink Key=ProgressBarBrush}"/>
        <Setter Property="SecondaryProgressBrush" Value="{tpf:ResourceLink Key=SecondaryProgressBarBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:RadialProgressBar">
                    <tpf:SimplePanel>
                        <Path x:Name="PART_Track" Fill="{TemplateBinding Background}"/>
                        <Path x:Name="PART_SecondaryProgress" Fill="{TemplateBinding SecondaryProgressBrush}"/>
                        <Path x:Name="PART_Progress" Fill="{TemplateBinding ProgressBrush}"/>
                        <ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </tpf:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:RadialProgressBar" BasedOn="{StaticResource TPF.RadialProgressBarStyle}"/>

    <!-- ========== WatermarkTextBox ========== -->
    <Style TargetType="tpf:WatermarkTextBox" x:Key="TPF.WatermarkTextBoxStyle">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:WatermarkTextBox">
                    <Border x:Name="ControlBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False">
                        <tpf:SimplePanel>
                            <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Focusable="False" BorderThickness="0"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="Watermark" ContentSource="Watermark" Margin="{TemplateBinding Padding}" Visibility="Visible" Focusable="False" KeyboardNavigation.IsTabStop="False"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False"
                                              TextElement.Foreground="{tpf:ResourceLink Key=ReadOnlyTextBrush}" TextElement.FontFamily="Arial"/>
                        </tpf:SimplePanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsWatermarkVisible" Value="False">
                            <Setter TargetName="Watermark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:WatermarkTextBox" BasedOn="{StaticResource TPF.WatermarkTextBoxStyle}"/>

    <!-- ========== PasswordBox ========== -->
    <Style TargetType="Button" x:Key="TPF.PasswordBoxButtonStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4 0 8 0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path x:Name="Icon" Stretch="Fill" Width="16" Height="10" Fill="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Data="M12,9 A3,3 0 0,0 9,12 A3,3 0 0,0 12,15 A3,3 0 0,0 15,12 A3,3 0 0,0 12,9 M12,17 A5,5 0 0,1 7,12 A5,5 0 0,1 12,7 A5,5 0 0,1 17,12 A5,5 0 0,1 12,17 M12,4.5 C7,4.5 2.73,7.61 1,12 C2.73,16.39 7,19.5 12,19.5 C17,19.5 21.27,16.39 23,12 C21.27,7.61 17,4.5 12,4.5 z"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Icon" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:PasswordBox" x:Key="TPF.PasswordBoxStyle">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:PasswordBox">
                    <Grid Cursor="IBeam">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Border x:Name="ControlBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Grid.ColumnSpan="2" Focusable="False"/>
                        <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Focusable="False" BorderThickness="0" IsTabStop="False"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <tpf:Button x:Name="PART_ShowPasswordButton" IsTabStop="False" Focusable="False" Grid.Column="1" Cursor="Hand" HorizontalAlignment="Right" Visibility="{TemplateBinding ShowPasswordButtonVisibility}" Style="{StaticResource TPF.PasswordBoxButtonStyle}"/>
                        <ContentPresenter x:Name="Watermark" ContentSource="Watermark" Margin="{TemplateBinding Padding}" Visibility="Visible" Focusable="False" KeyboardNavigation.IsTabStop="False"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False"
                                          TextElement.Foreground="{tpf:ResourceLink Key=ReadOnlyTextBrush}" TextElement.FontFamily="Arial"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsWatermarkVisible" Value="False">
                            <Setter TargetName="Watermark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:PasswordBox" BasedOn="{StaticResource TPF.PasswordBoxStyle}"/>

    <!-- ========== SearchTextBox ========== -->
    <PathGeometry x:Key="SearchGeometry" Figures="M14.1,0 C21,0 26.6,5.6 26.6,12.5 C26.6,14.9 26,17.1 24.8,19 L33.9,28 C35,29.2 35,31.1 33.9,32.3 C32.7,33.4 30.8,33.4 29.6,32.3 L20.6,23.2 C18.7,24.3 16.5,25 14.1,25 C7.2,25 1.6,19.4 1.6,12.5 C1.6,5.6 7.2,0 14.1,0 z M14.1,4 C18.8,4 22.6,7.8 22.6,12.5 C22.6,17.2 18.8,21 14.1,21 C9.4,21 5.6,17.2 5.6,12.5 C5.6,7.8 9.4,4 14.1,4 z"/>
    <Style TargetType="Button" x:Key="TPF.SearchTextBoxQueryButtonStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="Content" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:SearchTextBox" x:Key="TPF.SearchTextBoxStyle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="DropDownMaxHeight" Value="200"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="ItemsBorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="ItemsBackground" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="ItemsForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Watermark" Value="Suche"/>
        <Setter Property="QueryButtonCommand" Value="{x:Static tpf:SearchTextBox.SubmitQuery}"/>
        <Setter Property="QueryButtonContent" Value="{StaticResource SearchGeometry}"/>
        <Setter Property="QueryButtonContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Data="{Binding}" Fill="{Binding RelativeSource={RelativeSource AncestorType=ContentPresenter}, Path=(TextElement.Foreground)}" Stretch="Uniform" Width="16" Height="16"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:SearchTextBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Border x:Name="ControlBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2"/>
                        <Border x:Name="DisabledOverlay" IsHitTestVisible="False" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}" Background="{tpf:ResourceLink Key=DisabledBrush}"/>
                        <tpf:WatermarkTextBox x:Name="PART_TextBox" Grid.Column="0" Watermark="{TemplateBinding Watermark}" MaxLength="{TemplateBinding MaxLength}" CharacterCasing="{TemplateBinding CharacterCasing}"
                                              Background="Transparent" BorderThickness="0" Foreground="{TemplateBinding Foreground}" CaretBrush="{TemplateBinding Foreground}"
                                              FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Text="{Binding Value, RelativeSource={RelativeSource AncestorType=tpf:SearchTextBox}, UpdateSourceTrigger=PropertyChanged, Delay=100}"/>
                        <Button Grid.Column="1" Content="{TemplateBinding QueryButtonContent}" ContentTemplate="{TemplateBinding QueryButtonContentTemplate}" Command="{TemplateBinding QueryButtonCommand}"
                                Visibility="{TemplateBinding QueryButtonVisibility}" Style="{StaticResource TPF.SearchTextBoxQueryButtonStyle}"/>

                        <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <tpf:SimplePanel x:Name="PART_DropDownSizeElement" Width="{TemplateBinding ActualWidth}" MinWidth="{TemplateBinding DropDownMinWidth}" MaxWidth="{TemplateBinding DropDownMaxWidth}" MaxHeight="{TemplateBinding DropDownMaxHeight}">
                                <ListBox x:Name="PART_ListBox" Cursor="Hand" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}"
                                         ItemsSource="{TemplateBinding FilteredItems}" DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                         ItemContainerStyle="{TemplateBinding ItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                                         ItemTemplate="{TemplateBinding ItemTemplate}" ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                         Background="{TemplateBinding ItemsBackground}" Foreground="{TemplateBinding ItemsForeground}" BorderBrush="{TemplateBinding ItemsBorderBrush}"/>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding ItemsBackground}" Visibility="{Binding Visibility, ElementName=PART_NoResultsContentPresenter}">
                                    <ContentPresenter x:Name="PART_NoResultsContentPresenter" Content="{TemplateBinding NoResultsContent}" ContentTemplate="{TemplateBinding NoResultsContentTemplate}" Visibility="Collapsed" Margin="4 2"/>
                                </Border>
                            </tpf:SimplePanel>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="ControlBorder" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="DisabledOverlay" Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:SearchTextBox" BasedOn="{StaticResource TPF.SearchTextBoxStyle}"/>

    <!-- ========== NumericRangeBox ========== -->
    <Style TargetType="tpf:NumericRangeBox" x:Key="TPF.NumericRangeBoxStyle">
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="PositiveForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="NegativeForeground" Value="Red"/>
        <Setter Property="ZeroForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="3 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:NumericRangeBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Border x:Name="Background" Grid.ColumnSpan="2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"/>
                        <TextBox x:Name="PART_TextBox" IsReadOnly="{TemplateBinding IsReadOnly}" Padding="{TemplateBinding Padding}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" CaretBrush="{TemplateBinding Foreground}"
                                 BorderThickness="0" BorderBrush="Transparent" Foreground="{TemplateBinding Foreground}" TabIndex="{TemplateBinding TabIndex}">
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox">
                                    <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" BorderBrush="Transparent" BorderThickness="0" Background="Transparent" IsTabStop="False"
                                                  VerticalScrollBarVisibility="Auto"/>
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>

                        <Grid x:Name="ButtonsGrid" Grid.Column="1" Visibility="Collapsed">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="1"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <RepeatButton x:Name="PART_IncreaseButton" Grid.Row="0" Width="15" BorderThickness="1 1 1 0" Style="{StaticResource WPF.RepeatButtonStyle}" Padding="0" IsTabStop="False">
                                <Path Width="7" Height="4" Data="M0,4 L3.5,0 7,4 z" Fill="{tpf:ResourceLink Key=GlyphBrush}"/>
                            </RepeatButton>
                            <Border x:Name="ButtonSeparator" Grid.Row="1" Background="{tpf:ResourceLink Key=BorderBrush}"/>
                            <RepeatButton x:Name="PART_DecreaseButton" Grid.Row="2" Width="15" BorderThickness="1 0 1 1" Style="{StaticResource WPF.RepeatButtonStyle}" Padding="0" IsTabStop="False">
                                <Path Width="7" Height="4" Data="M0,0 L7,0 3.5,4 z" Fill="{tpf:ResourceLink Key=GlyphBrush}"/>
                            </RepeatButton>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_TextBox" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter TargetName="PART_IncreaseButton" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter TargetName="PART_DecreaseButton" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter TargetName="ButtonSeparator" Property="Background" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter TargetName="PART_IncreaseButton" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter TargetName="PART_DecreaseButton" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter TargetName="ButtonSeparator" Property="Background" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="ShowButtons" Value="True">
                            <Setter TargetName="ButtonsGrid" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ApplyPositiveForeground" Value="True"/>
                                <Condition Property="NumericValueType" Value="Positive"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding PositiveForeground, RelativeSource={RelativeSource AncestorType=tpf:NumericRangeBox}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ApplyNegativeForeground" Value="True"/>
                                <Condition Property="NumericValueType" Value="Negative"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding NegativeForeground, RelativeSource={RelativeSource AncestorType=tpf:NumericRangeBox}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ApplyZeroForeground" Value="True"/>
                                <Condition Property="NumericValueType" Value="Zero"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding ZeroForeground, RelativeSource={RelativeSource AncestorType=tpf:NumericRangeBox}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:NumericRangeBox" BasedOn="{StaticResource TPF.NumericRangeBoxStyle}"/>

    <!-- ========== ComboBox ========== -->
    <Style TargetType="ToggleButton" x:Key="TPF.ComboBoxToggleButtonStyle">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Border x:Name="Background" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                        <ContentPresenter Name="Content" TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                          Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Resources>
                                <Style TargetType="TextBlock">
                                    <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                        <Path x:Name="DropDownIcon" Grid.Column="1" Data="M0,0 L6,0 3,4 Z" Stretch="Fill" Width="6" Height="4" Margin="5 0" Fill="{tpf:ResourceLink Key=GlyphBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Background" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                            <Setter Property="Fill" TargetName="DropDownIcon" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="Background" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Background" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Background" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                            <Setter Property="Fill" TargetName="DropDownIcon" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Background" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Background" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox" x:Key="TPF.ComboBoxEditableTextBoxStyle">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    <ControlTemplate TargetType="tpf:ComboBox" x:Key="TPF.ComboBoxTemplate">
        <tpf:SimplePanel>
            <ToggleButton x:Name="PART_DropDownButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                          Style="{StaticResource TPF.ComboBoxToggleButtonStyle}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False"/>
            <ContentPresenter Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"/>
            <Popup x:Name="PART_Popup" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                <tpf:SimplePanel>
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=PART_DropDownButton}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Button x:Name="PART_ClearButton" Grid.Row="0" Margin="-1 -1 -1 0" Visibility="{TemplateBinding ClearSelectionButtonVisibility}" Style="{StaticResource WPF.ButtonStyle}"
                                    Content="{TemplateBinding ClearSelectionButtonContent}"/>
                            <ScrollViewer Grid.Row="1" BorderThickness="0" Foreground="{TemplateBinding Foreground}" Padding="0 1 0 0">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </tpf:SimplePanel>
            </Popup>
        </tpf:SimplePanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="tpf:ComboBox" x:Key="TPF.EditableComboBoxTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Margin="1 1 0 1" Padding="{TemplateBinding Padding}"
                     Style="{TemplateBinding TextBoxStyle}" IsReadOnly="{TemplateBinding IsReadOnly}" VerticalAlignment="Stretch"
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center">
                <TextBox.Template>
                    <ControlTemplate TargetType="TextBox">
                        <tpf:SimplePanel>
                            <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                          Background="{TemplateBinding Background}" IsTabStop="false" VerticalScrollBarVisibility="Auto" VerticalContentAlignment="Stretch"/>
                        </tpf:SimplePanel>
                    </ControlTemplate>
                </TextBox.Template>
            </TextBox>
            <ToggleButton x:Name="PART_DropDownButton" Grid.Column="1" Background="{Binding Background, ElementName=PART_EditableTextBox}" BorderBrush="Transparent" BorderThickness="0"
                          Style="{StaticResource TPF.ComboBoxToggleButtonStyle}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False"/>
            <Border x:Name="Border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="false"/>
            <TextBlock x:Name="Watermark" IsHitTestVisible="False" Text="{TemplateBinding EmptyText}" Padding="{TemplateBinding Padding}"
                       VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed" Margin="4 0 0 0"/>
            <Popup x:Name="PART_Popup" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                <tpf:SimplePanel>
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=tpf:ComboBox}}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Button x:Name="PART_ClearButton" Grid.Row="0" Margin="-1 -1 -1 0" Visibility="{TemplateBinding ClearSelectionButtonVisibility}" Style="{StaticResource WPF.ButtonStyle}"
                                    Content="{TemplateBinding ClearSelectionButtonContent}"/>
                            <ScrollViewer Grid.Row="1" BorderThickness="0" Foreground="{TemplateBinding Foreground}" Padding="0 1 0 0">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </tpf:SimplePanel>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
            </Trigger>
            <Trigger SourceName="PART_EditableTextBox" Property="Text" Value="">
                <Setter TargetName="Watermark" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="tpf:ComboBox" x:Key="TPF.ComboBoxStyle">
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MaxDropDownHeight" Value="200"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="EditableTemplate" Value="{StaticResource TPF.EditableComboBoxTemplate}"/>
        <Setter Property="TextBoxStyle" Value="{StaticResource TPF.ComboBoxEditableTextBoxStyle}"/>
        <Setter Property="Template" Value="{StaticResource TPF.ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="Template" Value="{Binding EditableTemplate, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="tpf:ComboBox" BasedOn="{StaticResource TPF.ComboBoxStyle}"/>
    <Style TargetType="tpf:ComboBoxItem" x:Key="TPF.ComboBoxItemStyle">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ComboBoxItem">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=tpf:ComboBox}, Path=AllowMultiSelection}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                                <Setter Property="Background" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                                <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ComboBoxItem" BasedOn="{StaticResource TPF.ComboBoxItemStyle}"/>

    <!-- ========== Slider ========== -->
    <Style TargetType="RepeatButton" x:Key="TPF.TransparentRepeatButtonStyle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Thumb" x:Key="TPF.ThumbStyle">
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="8"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate TargetType="tpf:Slider" x:Key="TPF.HorizontalSliderTemplate">
        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <tpf:TickBar x:Name="TopTick" Grid.Row="0" Grid.ColumnSpan="3" TickBrush="{tpf:ResourceLink Key=TextBrush}" Placement="Top" Height="4" Margin="0 0 0 2" Visibility="Collapsed"/>
                <tpf:TickBar x:Name="BottomTick" Grid.Row="2" Grid.ColumnSpan="3" TickBrush="{tpf:ResourceLink Key=TextBrush}" Placement="Bottom" Height="4" Margin="0 2 0 0" Visibility="Collapsed"/>
                <Border x:Name="TrackBackground" Grid.Row="1" Grid.ColumnSpan="3" Height="6" Background="#DBDDE6"/>
                <tpf:SliderTrack x:Name="PART_Track" Grid.Row="1">
                    <tpf:SliderTrack.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static tpf:Slider.DecreaseLarge}" Style="{StaticResource TPF.TransparentRepeatButtonStyle}"/>
                    </tpf:SliderTrack.DecreaseRepeatButton>
                    <tpf:SliderTrack.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static tpf:Slider.IncreaseLarge}" Style="{StaticResource TPF.TransparentRepeatButtonStyle}"/>
                    </tpf:SliderTrack.IncreaseRepeatButton>
                    <tpf:SliderTrack.Thumb>
                        <Thumb Style="{TemplateBinding ThumbStyle}"/>
                    </tpf:SliderTrack.Thumb>
                </tpf:SliderTrack>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="Thumb" x:Key="TPF.VerticalThumbStyle">
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate TargetType="tpf:Slider" x:Key="TPF.VerticalSliderTemplate">
        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*" MinWidth="{TemplateBinding MinWidth}"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <tpf:TickBar x:Name="TopTick" Grid.Column="0" TickBrush="{tpf:ResourceLink Key=TextBrush}" Placement="Left" Width="4" Margin="0 0 2 0" Visibility="Collapsed"/>
                <tpf:TickBar x:Name="BottomTick" Grid.Column="2" TickBrush="{tpf:ResourceLink Key=TextBrush}" Placement="Right" Width="4" Margin="2 0 0 0" Visibility="Collapsed"/>
                <Border x:Name="TrackBackground" Width="6" Grid.Column="1" Background="#DBDDE6"/>
                <tpf:SliderTrack x:Name="PART_Track" Grid.Column="1">
                    <tpf:SliderTrack.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static tpf:Slider.DecreaseLarge}" Style="{StaticResource TPF.TransparentRepeatButtonStyle}"/>
                    </tpf:SliderTrack.DecreaseRepeatButton>
                    <tpf:SliderTrack.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static tpf:Slider.IncreaseLarge}" Style="{StaticResource TPF.TransparentRepeatButtonStyle}"/>
                    </tpf:SliderTrack.IncreaseRepeatButton>
                    <tpf:SliderTrack.Thumb>
                        <Thumb Style="{TemplateBinding ThumbStyle}"/>
                    </tpf:SliderTrack.Thumb>
                </tpf:SliderTrack>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="tpf:Slider" x:Key="TPF.SliderStyle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ThumbStyle" Value="{StaticResource TPF.ThumbStyle}"/>
        <Setter Property="Template" Value="{StaticResource TPF.HorizontalSliderTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="ThumbStyle" Value="{StaticResource TPF.VerticalThumbStyle}"/>
                <Setter Property="Template" Value="{StaticResource TPF.VerticalSliderTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="tpf:Slider" BasedOn="{StaticResource TPF.SliderStyle}"/>

    <!-- ========== Color-Editor ========== -->
    <Style TargetType="tpf:Pad" x:Key="TPF.PadStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Pad">
                    <tpf:SimplePanel Background="Transparent">
                        <Canvas>
                            <ContentPresenter Content="{TemplateBinding Content}"/>
                        </Canvas>
                    </tpf:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Pad" BasedOn="{StaticResource TPF.PadStyle}"/>
    <LinearGradientBrush x:Key="HueSpectrumBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FFFF0000"/>
        <GradientStop Color="#FEFFFF00" Offset="0.167"/>
        <GradientStop Color="#FE00FF00" Offset="0.333"/>
        <GradientStop Color="#FE00FFFF" Offset="0.5"/>
        <GradientStop Color="#FE0000FF" Offset="0.667"/>
        <GradientStop Color="#FEFF00FF" Offset="0.833"/>
        <GradientStop Color="#FFFF0000" Offset="1.0"/>
    </LinearGradientBrush>
    <Style TargetType="tpf:ColorEditor" x:Key="TPF.ColorEditorStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ColorEditor">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=tpf:ColorEditor}, Path=(tpf:BorderElement.CornerRadius)}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" MinHeight="160"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <!--Farbsättigung-->
                            <tpf:SimplePanel Grid.Row="0" Grid.Column="0" Margin="0 0 0 3">
                                <Rectangle Fill="{Binding RelativePositionPoint.Y , ElementName=PART_HuePad, Converter={StaticResource HueToBrushConverter}}"/>
                                <Rectangle>
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                            <GradientStop Offset="0" Color="#FFFFFFFF"/>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle>
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,1" EndPoint="0, 0">
                                            <GradientStop Offset="0" Color="#FF000000"/>
                                            <GradientStop Offset="1" Color="#00000000"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Border BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                                    <tpf:Pad x:Name="PART_SaturationPad" ClipToBounds="True">
                                        <tpf:SimplePanel Width="12" Height="12">
                                            <Ellipse Stroke="Black" StrokeThickness="1"/>
                                            <Ellipse Stroke="White" StrokeThickness="1" Margin="1"/>
                                        </tpf:SimplePanel>
                                    </tpf:Pad>
                                </Border>
                            </tpf:SimplePanel>
                            <!--Farbspektrum-->
                            <tpf:SimplePanel Grid.Column="1" Width="20" Margin="3 0 0 3">
                                <Rectangle Fill="{StaticResource HueSpectrumBrush}"/>
                                <Border BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                                    <tpf:Pad x:Name="PART_HuePad" MovementDirection="Y">
                                        <tpf:SimplePanel Width="18" Height="6">
                                            <Path Data="M0,0 L4,3 0,6 Z" HorizontalAlignment="Left" Fill="Black"/>
                                            <Path Data="M4,0 L4,6 0,3 Z" HorizontalAlignment="Right" Fill="Black"/>
                                        </tpf:SimplePanel>
                                    </tpf:Pad>
                                </Border>
                            </tpf:SimplePanel>
                            <!--Eingabefelder und Slider-->
                            <Grid Grid.Column="2" Width="170" Margin="10 0 0 0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="10" Width="Auto"/>
                                    <ColumnDefinition MinWidth="60" Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Text="R" Grid.Column="0" Grid.Row="0" Foreground="{tpf:ResourceLink Key=TextBrush}" VerticalAlignment="Center"/>
                                <TextBlock Text="G" Grid.Column="0" Grid.Row="1" Foreground="{tpf:ResourceLink Key=TextBrush}" VerticalAlignment="Center"/>
                                <TextBlock Text="B" Grid.Column="0" Grid.Row="2" Foreground="{tpf:ResourceLink Key=TextBrush}" VerticalAlignment="Center"/>
                                <TextBlock Text="A" Grid.Column="0" Grid.Row="3" Foreground="{tpf:ResourceLink Key=TextBrush}" VerticalAlignment="Center"/>
                                <TextBlock Text="#" Grid.Column="0" Grid.Row="4" Foreground="{tpf:ResourceLink Key=TextBrush}" VerticalAlignment="Center"/>

                                <tpf:NumericRangeBox Grid.Column="1" Grid.Row="0" Margin="4 1" NumberDecimalDigits="0" Minimum="0" Maximum="255"
                                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Red, Mode=TwoWay, FallbackValue=0}"/>
                                <tpf:NumericRangeBox Grid.Column="1" Grid.Row="1" Margin="4 1" NumberDecimalDigits="0" Minimum="0" Maximum="255"
                                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Green, Mode=TwoWay, FallbackValue=0}"/>
                                <tpf:NumericRangeBox Grid.Column="1" Grid.Row="2" Margin="4 1" NumberDecimalDigits="0" Minimum="0" Maximum="255"
                                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Blue, Mode=TwoWay, FallbackValue=0}"/>
                                <tpf:NumericRangeBox Grid.Column="1" Grid.Row="3" Margin="4 1" NumberDecimalDigits="0" Minimum="0" Maximum="255"
                                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Alpha, Mode=TwoWay, FallbackValue=0}"/>
                                <TextBox x:Name="PART_HexStringTextBox" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="4" Margin="4 3 0 0" MaxLength="8" CharacterCasing="Upper"
                                         Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HexString, Mode=TwoWay}"/>

                                <tpf:Slider Grid.Column="2" Grid.Row="0" Minimum="0" Maximum="255" SmallChange="1" LargeChange="1" IsMoveToPointEnabled="True"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Red, Mode=TwoWay, FallbackValue=0}"/>
                                <tpf:Slider Grid.Column="2" Grid.Row="1" Minimum="0" Maximum="255" SmallChange="1" LargeChange="1" IsMoveToPointEnabled="True"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Green, Mode=TwoWay, FallbackValue=0}"/>
                                <tpf:Slider Grid.Column="2" Grid.Row="2" Minimum="0" Maximum="255" SmallChange="1" LargeChange="1" IsMoveToPointEnabled="True"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Blue, Mode=TwoWay, FallbackValue=0}"/>
                                <tpf:Slider Grid.Column="2" Grid.Row="3" Minimum="0" Maximum="255" SmallChange="1" LargeChange="1" IsMoveToPointEnabled="True"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Alpha, Mode=TwoWay, FallbackValue=0}"/>

                                <StackPanel Grid.Row="5" Grid.Column="1" Grid.ColumnSpan="2" Orientation="Horizontal" Margin="0 3 0 0">
                                    <tpf:EyeDropper Width="20" Height="20" Background="Transparent">
                                        <Path Width="18" Height="18" Margin="3 3 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M8.7,5.6 L1.7,12.6 3.4,14.3 10.4,7.3 M12.7,0 L16,3.3 12.7,6.6 14.3,8.3 13.1,9.5 11.9,8.2 4.1,16 0,16 0,11.9 7.7,4.1 6.5,2.9 7.7,1.7 9.4,3.3 z" Fill="{tpf:ResourceLink Key=GlyphBrush}"/>
                                    </tpf:EyeDropper>
                                </StackPanel>
                            </Grid>
                            <!--Ausgewählte Farbe-->
                            <Rectangle Grid.Column="0" Grid.Row="1" Height="20" SnapsToDevicePixels="True">
                                <Rectangle.Fill>
                                    <DrawingBrush Stretch="None" TileMode="Tile" Viewport="0 0 14 14" ViewportUnits="Absolute">
                                        <DrawingBrush.Drawing>
                                            <DrawingGroup>
                                                <GeometryDrawing Geometry="M0,0 L14,0 14,14 0,14Z" Brush="White"/>
                                                <GeometryDrawing Geometry="M0,7 L14,7 14,14 7,14 7,0 0,0Z" Brush="Gray"/>
                                            </DrawingGroup>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Border Grid.Column="0" Grid.Row="1" Height="20" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedColor, Converter={StaticResource ColorToBrushConverter}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ColorEditor" BasedOn="{StaticResource TPF.ColorEditorStyle}"/>

    <!-- ========== RadialMenuCentralButton ========== -->
    <Style TargetType="tpf:RadialMenuCentralButton" x:Key="TPF.RadialMenuCentralButtonStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="BackContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Data="M0,7 L7,0 9,0 4,6 18,6 18,8 4,8 9,14 7,14 0,7 z"
                          Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=tpf:RadialMenuCentralButton}}" Stretch="Fill" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:RadialMenuCentralButton">
                    <tpf:SimplePanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackgroundElement" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackgroundElement" Storyboard.TargetProperty="Stroke">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackgroundElement" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackgroundElement" Storyboard.TargetProperty="Stroke">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="NavigationStates">
                                <VisualState x:Name="Base"/>
                                <VisualState x:Name="Back">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NormalContent" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NavigationContent" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Ellipse x:Name="BackgroundElement" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness.Left}"/>
                        <ContentPresenter x:Name="NormalContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <ContentPresenter x:Name="NavigationContent" ContentTemplate="{TemplateBinding BackContentTemplate}" Height="14" Width="18" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"/>
                    </tpf:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:RadialMenuCentralButton" BasedOn="{StaticResource TPF.RadialMenuCentralButtonStyle}"/>
    <!-- ========== RadialMenuNavigationButton ========== -->
    <Style TargetType="tpf:RadialMenuNavigationButton" x:Key="TPF.RadialMenuNavigationButtonStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:RadialMenuNavigationButton">
                    <tpf:SimplePanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Background" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Background" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="PART_Background" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
                    </tpf:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:RadialMenuNavigationButton" BasedOn="{StaticResource TPF.RadialMenuNavigationButtonStyle}"/>
    <!-- ========== NavigationMenuBackground ========== -->
    <Style TargetType="tpf:Donut" x:Key="TPF.NavigationMenuBackgroundStyle">
        <Setter Property="Fill" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="Stroke" Value="{tpf:ResourceLink Key=BorderBrush}"/>
    </Style>
    <!-- ========== ContentMenuBackground ========== -->
    <Style TargetType="Ellipse" x:Key="TPF.ContentMenuBackgroundStyle">
        <Setter Property="Fill" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
    </Style>
    <!-- ========== RadialMenu ========== -->
    <Style TargetType="tpf:RadialMenu" x:Key="RadialMenuStyle">
        <Setter Property="NavigationMenuBackgroundStyle" Value="{StaticResource TPF.NavigationMenuBackgroundStyle}"/>
        <Setter Property="ContentMenuBackgroundStyle" Value="{StaticResource TPF.ContentMenuBackgroundStyle}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="MinWidth" Value="240"/>
        <Setter Property="MinHeight" Value="240"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:RadialMenu">
                    <tpf:SimplePanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="MenuStates">
                                <VisualState x:Name="Open">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimationGrid" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimationGrid" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Closed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimationGrid" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimationGrid" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <tpf:SimplePanel x:Name="AnimationGrid" RenderTransformOrigin="0.5, 0.5">
                            <tpf:SimplePanel.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0" ScaleY="0"/>
                                </TransformGroup>
                            </tpf:SimplePanel.RenderTransform>
                            <Grid x:Name="PART_BackgroundGrid"/>
                            <ItemsControl x:Name="PART_MainContent">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <tpf:RadialPanel/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </tpf:SimplePanel>
                        <tpf:RadialMenuCentralButton/>
                    </tpf:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:RadialMenu" BasedOn="{StaticResource RadialMenuStyle}"/>
    <!-- ========== RadialMenuItem ========== -->
    <Style TargetType="tpf:RadialMenuItem" x:Key="TPF.RadialMenuItemStyle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:RadialMenuItem">
                    <StackPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IconPresenter" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderPresenter" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="IconPresenter" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderPresenter" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentControl x:Name="IconPresenter" Content="{TemplateBinding IconContent}" Foreground="{TemplateBinding Foreground}"
                                        VerticalAlignment="Bottom" HorizontalAlignment="Center" UseLayoutRounding="True"/>
                        <ContentControl x:Name="HeaderPresenter" Content="{TemplateBinding HeaderContent}" Foreground="{TemplateBinding Foreground}"
                                        VerticalAlignment="Bottom" HorizontalAlignment="Center"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:RadialMenuItem" BasedOn="{StaticResource TPF.RadialMenuItemStyle}"/>

    <!-- ========== HamburgerMenu ========== -->
    <Style TargetType="ToggleButton" x:Key="TPF.HamburgerMenuToggleButtonStyle" BasedOn="{StaticResource WPF.ToggleButtonStyle}">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}"/>
    </Style>
    <Style TargetType="tpf:HamburgerMenu" x:Key="TPF.HamburgerMenuStyle">
        <Setter Property="MenuBackground" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="MenuHeaderBackground" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="MenuHeaderForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MenuCollapsedWidth" Value="40"/>
        <Setter Property="MenuExpandedWidth" Value="200"/>
        <Setter Property="MenuHeaderHeight" Value="36"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MenuToggleButtonStyle" Value="{StaticResource TPF.HamburgerMenuToggleButtonStyle}"/>
        <Setter Property="MenuToggleButtonContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Data="{Binding}" Width="16" Height="16" Fill="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Foreground}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MenuToggleButtonContent">
            <Setter.Value>
                <Geometry>M0,0 L15,0 15,3 0,3 z M0,6 L15,6 15,9 0,9 z M0,12 L15,12 15,15 0,15 z</Geometry>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:HamburgerMenu">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Rectangle Name="PART_DismissalOverlay" Grid.RowSpan="2" Grid.Column="1" Panel.ZIndex="2" Fill="Transparent" Visibility="Collapsed"/>
                        <Border Name="MinimalModeHeader" Grid.ColumnSpan="2" Visibility="Collapsed" Panel.ZIndex="1" Height="{TemplateBinding MenuHeaderHeight}"
                                Background="{TemplateBinding MenuHeaderBackground}" BorderBrush="{TemplateBinding BorderBrush}"
                                Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MenuCollapsedWidth, Converter={StaticResource DoubleToThicknessConverter}, ConverterParameter=#\,0\,0\,0}"
                                BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessToSpecificThicknessConverter}, ConverterParameter=#\,#\,#\,0}">
                            <ContentPresenter ContentSource="MenuHeader" Margin="10 0" TextElement.Foreground="{TemplateBinding MenuHeaderForeground}" VerticalAlignment="Center"/>
                        </Border>
                        <ToggleButton Width="{TemplateBinding MenuCollapsedWidth}" Height="{TemplateBinding MenuHeaderHeight}" HorizontalAlignment="Left" Panel.ZIndex="2"
                                      Content="{TemplateBinding MenuToggleButtonContent}" ContentTemplate="{TemplateBinding MenuToggleButtonContentTemplate}"
                                      Visibility="{TemplateBinding MenuToggleButtonVisibility}" Style="{TemplateBinding MenuToggleButtonStyle}"
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMenuOpen, Mode=TwoWay}" BorderBrush="Transparent"/>
                        <Border x:Name="ContentArea" Grid.Column="0" Grid.ColumnSpan="2" Grid.RowSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MenuCollapsedWidth, Converter={StaticResource DoubleToThicknessConverter}, ConverterParameter=#\,0\,0\,0}">
                            <ContentPresenter ContentSource="Content" TextElement.Foreground="{TemplateBinding Foreground}"/>
                        </Border>
                        <Grid x:Name="PART_MenuRoot" Grid.Column="0" Grid.RowSpan="2" Panel.ZIndex="1" Width="{TemplateBinding MenuWidth}" Background="{TemplateBinding MenuBackground}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <Border Grid.RowSpan="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>
                            <tpf:SimplePanel Grid.Row="0" Height="{TemplateBinding MenuHeaderHeight}" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MenuCollapsedWidth, Converter={StaticResource DoubleToThicknessConverter}, ConverterParameter=#\,0\,0\,0}">
                                <Border Background="{TemplateBinding MenuHeaderBackground}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                <ContentPresenter ContentSource="MenuHeader" Margin="10 0" TextElement.Foreground="{TemplateBinding MenuHeaderForeground}" VerticalAlignment="Center"/>
                            </tpf:SimplePanel>
                            <ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Padding="0" BorderThickness="0" Background="{x:Null}">
                                <ScrollViewer.Resources>
                                    <Style TargetType="ScrollBar">
                                        <Setter Property="MinWidth" Value="10"/>
                                        <Setter Property="Width" Value="10"/>
                                    </Style>
                                </ScrollViewer.Resources>
                                <ItemsPresenter/>
                            </ScrollViewer>
                            <Border Grid.Row="2">
                                <ContentPresenter ContentSource="MenuFooter" TextElement.Foreground="{TemplateBinding Foreground}"/>
                            </Border>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="DisplayMode" Value="Minimal">
                            <Setter TargetName="ContentArea" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ContentArea" Property="Margin" Value="0"/>
                            <Setter TargetName="ContentArea" Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="MinimalModeHeader" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_MenuRoot" Property="Panel.ZIndex" Value="0"/>
                        </Trigger>
                        <Trigger Property="DisplayMode" Value="Expanded">
                            <Setter TargetName="ContentArea" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="ContentArea" Property="Margin" Value="0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMenuOpen" Value="True"/>
                                <Condition Property="DisplayMode" Value="Minimal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_DismissalOverlay" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMenuOpen" Value="True"/>
                                <Condition Property="DisplayMode" Value="Compact"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_DismissalOverlay" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:HamburgerMenu" BasedOn="{StaticResource TPF.HamburgerMenuStyle}"/>
    <!-- ========== HamburgerMenuItem ========== -->
    <ControlTemplate TargetType="tpf:HamburgerMenuItem" x:Key="TPF.ItemHamburgerMenuItemTemplate">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Grid x:Name="PART_LabelContainer" Grid.Row="0" Height="36">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType=tpf:HamburgerMenu}, Path=MenuCollapsedWidth}"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Border Grid.ColumnSpan="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Background="Transparent"/>
                <Border Grid.ColumnSpan="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"/>
                <ContentPresenter x:Name="IconPresenter" ContentSource="Icon" Grid.Column="0" TextElement.Foreground="{tpf:ResourceLink Key=GlyphBrush}"/>
                <ContentPresenter x:Name="LabelPresenter" ContentSource="Label" Grid.Column="1" RecognizesAccessKey="True" Margin="{TemplateBinding Padding}"
                                  TextElement.FontSize="{TemplateBinding FontSize}" TextElement.Foreground="{tpf:ResourceLink Key=TextBrush}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <tpf:SimplePanel x:Name="PART_ExpandCollapseTogglePanel" Grid.Column="2" Background="Transparent" MinWidth="36">
                    <ContentPresenter x:Name="ExpandIconPresenter" Content="{TemplateBinding ExpandIcon}" ContentTemplate="{TemplateBinding ExpandIconTemplate}" Visibility="Collapsed"/>
                    <ContentPresenter x:Name="CollapseIconPresenter" Content="{TemplateBinding CollapseIcon}" ContentTemplate="{TemplateBinding CollapseIconTemplate}" Visibility="Collapsed"/>
                </tpf:SimplePanel>
            </Grid>

            <ItemsPresenter Grid.Row="1" Visibility="{TemplateBinding IsExpanded, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                <Setter TargetName="LabelPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                <Setter TargetName="ExpandIconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                <Setter TargetName="CollapseIconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                <Setter Property="Background" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                <Setter TargetName="LabelPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                <Setter TargetName="ExpandIconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                <Setter TargetName="CollapseIconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                <Setter Property="Background" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasSelectedSubItem" Value="True"/>
                    <Condition Property="IsExpanded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="IconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                <Setter TargetName="LabelPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                <Setter TargetName="ExpandIconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                <Setter TargetName="CollapseIconPresenter" Property="TextElement.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                <Setter Property="Background" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasItems" Value="True"/>
                    <Condition Property="IsExpanded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ExpandIconPresenter" Property="Visibility" Value="Visible"/>
                <Setter TargetName="CollapseIconPresenter" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasItems" Value="True"/>
                    <Condition Property="IsExpanded" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ExpandIconPresenter" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="CollapseIconPresenter" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="tpf:HamburgerMenuItem" x:Key="TPF.HeaderHamburgerMenuItemTemplate">
        <Grid HorizontalAlignment="Stretch" Height="36" Visibility="{Binding RelativeSource={RelativeSource AncestorType=tpf:HamburgerMenu}, Path=IsMenuOpen, Converter={StaticResource BooleanToVisibilityConverter}}" Focusable="false">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="IconPresenter" ContentSource="Icon" Grid.Column="0" TextElement.Foreground="{tpf:ResourceLink Key=GlyphBrush}"
                              Width="{Binding RelativeSource={RelativeSource AncestorType=tpf:HamburgerMenu}, Path=MenuCollapsedWidth}"
                              Visibility="{TemplateBinding Icon, Converter={StaticResource NullToVisibilityConverter}}"/>
            <ContentPresenter x:Name="LabelPresenter" ContentSource="Label" Grid.Column="1" RecognizesAccessKey="True" Margin="{TemplateBinding Padding}"
                              TextElement.FontSize="{TemplateBinding FontSize}" TextElement.Foreground="{TemplateBinding Foreground}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate TargetType="tpf:HamburgerMenuItem" x:Key="TPF.SeparatorHamburgerMenuItemTemplate">
        <Separator Height="30" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" Focusable="False"/>
    </ControlTemplate>
    <Style TargetType="tpf:HamburgerMenuItem" x:Key="TPF.HamburgerMenuItemStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10 0"/>
        <Setter Property="ExpandIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Data="{Binding}" Width="12" Height="12" Stretch="Uniform" Fill="{Binding RelativeSource={RelativeSource AncestorType=ContentPresenter}, Path=(TextElement.Foreground)}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ExpandIcon">
            <Setter.Value>
                <Geometry>M0,0 L5,5 10,0 9.5,-0.5 5,4 0.5,-0.5 z</Geometry>
            </Setter.Value>
        </Setter>
        <Setter Property="CollapseIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Data="{Binding}" Width="12" Height="12" Stretch="Uniform" Fill="{Binding RelativeSource={RelativeSource AncestorType=ContentPresenter}, Path=(TextElement.Foreground)}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="CollapseIcon">
            <Setter.Value>
                <Geometry>M0,5 L5,0 10,5 9.5,5.5 5,1 0.5,5.5 z</Geometry>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource TPF.ItemHamburgerMenuItemTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="Header">
                <Setter Property="Template" Value="{StaticResource TPF.HeaderHamburgerMenuItemTemplate}"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger Property="Role" Value="Separator">
                <Setter Property="Template" Value="{StaticResource TPF.SeparatorHamburgerMenuItemTemplate}"/>
                <Setter Property="Background" Value="{tpf:ResourceLink Key=BorderBrush}"/>
                <Setter Property="IsTabStop" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="tpf:HamburgerMenuItem" BasedOn="{StaticResource TPF.HamburgerMenuItemStyle}"/>

    <!-- ========== TaskBoardCard ========== -->
    <taskboard:TaskBoardCardIconTemplateSelector x:Key="DefaultTaskBoardCardIconTemplateSelector">
        <taskboard:TaskBoardCardIconTemplateSelector.ImageTemplate>
            <DataTemplate>
                <Image Source="{Binding }" Stretch="None"/>
            </DataTemplate>
        </taskboard:TaskBoardCardIconTemplateSelector.ImageTemplate>
    </taskboard:TaskBoardCardIconTemplateSelector>
    <Style TargetType="tpf:TaskBoardCard" x:Key="TPF.TaskBoardCardStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=InputBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5 3"/>
        <Setter Property="IconTemplateSelector" Value="{StaticResource DefaultTaskBoardCardIconTemplateSelector}"/>
        <Setter Property="TagTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Background="{tpf:ResourceLink Key=HeaderBrush}" Margin="0 0 5 0" Padding="4 2">
                        <ContentPresenter Content="{Binding }" TextElement.Foreground="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:TaskBoardCard">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Border Grid.Column="0" Background="{TemplateBinding IndicatorBrush}"  Width="4" Margin="-1"
                                    CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=tpf:TaskBoardCard}, Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=#\,0\,0\,#}"/>

                            <Grid Grid.Column="1" Margin="{TemplateBinding Padding}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Grid.Row="0" Grid.Column="0" Text="{TemplateBinding Title}" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" FontWeight="Bold"/>

                                <ContentPresenter ContentSource="Icon" Grid.Row="0" Grid.Column="1" Margin="4 5" MaxHeight="20" MaxWidth="20"/>

                                <TextBlock Grid.Row="1" Grid.ColumnSpan="2" Text="{TemplateBinding Description}" TextWrapping="Wrap" TextTrimming="CharacterEllipsis"
                                           Margin="0 2 0 0" HorizontalAlignment="Left" VerticalAlignment="Top"/>

                                <ItemsControl Grid.Row="2" Grid.ColumnSpan="2" Margin="0 2 0 0" Focusable="False" ItemTemplate="{TemplateBinding TagTemplate}" ItemsSource="{TemplateBinding Tags}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TaskBoardCard" BasedOn="{StaticResource TPF.TaskBoardCardStyle}"/>
    <DataTemplate x:Key="TPF.TaskBoardItemCardTemplate">
        <tpf:TaskBoardCard Assignee="{Binding Assignee}" Title="{Binding Title}" Description="{Binding Description}" Icon="{Binding Icon}" State="{Binding State}" Type="{Binding Type}" Tags="{Binding Tags}"/>
    </DataTemplate>
    <!-- ========== TaskBoardItem ========== -->
    <Style TargetType="tpf:TaskBoardItem" x:Key="TPF.TaskBoardItemStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="1 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:TaskBoardItem">
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TaskBoardItem" BasedOn="{StaticResource TPF.TaskBoardItemStyle}"/>
    <!-- ========== TaskBoardColumn ========== -->
    <Style TargetType="ToggleButton" x:Key="TPF.TaskBoardColumnToggleButtonStyle" BasedOn="{StaticResource WPF.ToggleButtonStyle}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                            <Setter Property="Foreground" Value="{tpf:ResourceLink Key=ReadOnlyTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="TPF.TaskBoardColumnHeaderTemplate">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <TextBlock Text="{Binding}" FontWeight="Bold"/>

            <StackPanel Grid.Row="1" Orientation="Horizontal" DataContext="{Binding RelativeSource={RelativeSource AncestorType=tpf:TaskBoardColumn}}">
                <TextBlock Text="Items: "/>
                <TextBlock Text="{Binding Items.Count}"/>
                <TextBlock Text=" / " Visibility="{Binding Maximum, Converter={StaticResource IntToVisibilityConverter}}"/>
                <TextBlock Text="{Binding Maximum}" Visibility="{Binding Maximum, Converter={StaticResource IntToVisibilityConverter}}"/>
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="TPF.TaskBoardColumnCollapsedHeaderTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBlock Text="{Binding}" FontWeight="Bold" Margin="0 0 5 0"/>

            <StackPanel Grid.Column="1" Orientation="Horizontal" DataContext="{Binding RelativeSource={RelativeSource AncestorType=tpf:TaskBoardColumn}}">
                <TextBlock Text="[ "/>
                <TextBlock Text="{Binding Items.Count}"/>
                <TextBlock Text=" / " Visibility="{Binding Maximum, Converter={StaticResource IntToVisibilityConverter}}"/>
                <TextBlock Text="{Binding Maximum}" Visibility="{Binding Maximum, Converter={StaticResource IntToVisibilityConverter}}"/>
                <TextBlock Text=" ]"/>
            </StackPanel>
        </Grid>
    </DataTemplate>
    <Style TargetType="tpf:TaskBoardColumn" x:Key="TPF.TaskBoardColumnStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="HeaderForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="HeaderBackground" Value="Transparent"/>
        <Setter Property="HeaderBorderThickness" Value="1"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="HeaderTemplate" Value="{StaticResource TPF.TaskBoardColumnHeaderTemplate}"/>
        <Setter Property="CollapsedHeaderTemplate" Value="{StaticResource TPF.TaskBoardColumnCollapsedHeaderTemplate}"/>
        <Setter Property="StateIndicatorSelector" Value="{Binding TaskBoard.ColumnStateIndicatorSelector, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="ItemTemplate" Value="{Binding TaskBoard.ItemTemplate, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="ItemTemplateSelector" Value="{Binding TaskBoard.ItemTemplateSelector, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="ItemContainerStyle" Value="{Binding TaskBoard.ItemContainerStyle, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="ItemContainerStyleSelector" Value="{Binding TaskBoard.ItemContainerStyleSelector, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:TaskBoardColumn">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border x:Name="HeaderBackground" Grid.Row="0" Background="{TemplateBinding HeaderBackground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding HeaderBorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource CornerRadiusToSpecificCornerRadiusConverter}, ConverterParameter=#\,#\,0\,0}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter x:Name="HeaderPresenter" Grid.Row="0" Grid.Column="0" ContentSource="Header" Margin="8 4" TextBlock.Foreground="{TemplateBinding HeaderForeground}" RenderTransformOrigin="0.5 0.5"/>

                                <ToggleButton x:Name="CollapseExpandButton" Grid.Row="0" Grid.Column="1" Style="{StaticResource TPF.TaskBoardColumnToggleButtonStyle}"
                                              IsChecked="{Binding IsCollapsed, RelativeSource={RelativeSource AncestorType=tpf:TaskBoardColumn}, Mode=TwoWay}"
                                              Visibility="{Binding CanUserCollapseColumns, RelativeSource={RelativeSource AncestorType=tpf:TaskBoard}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Path x:Name="CollapseExpandButtonContent" Data="M5,0 L0,5 5,10 5.5,9.5 1,5 5.5,0.5 z" Width="16" Height="16" Fill="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Foreground}" Stretch="Uniform"/>
                                </ToggleButton>
                                <Rectangle Grid.Row="1" Grid.ColumnSpan="2" Fill="{TemplateBinding StateIndicator}" Height="2" VerticalAlignment="Top"/>
                            </Grid>
                        </Border>

                        <ScrollViewer x:Name="ItemsScrollViewer" Grid.Row="1" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessToSpecificThicknessConverter}, ConverterParameter=#\,0\,#\,#}"
                                      HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter TargetName="CollapseExpandButton" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="CollapseExpandButton" Property="Padding" Value="0 6"/>
                            <Setter TargetName="CollapseExpandButtonContent" Property="Data" Value="M0,0 L5,5 0,10 -0.5,9.5 4,5 -0.5,0.5 z"/>
                            <Setter TargetName="ItemsScrollViewer" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="HeaderBackground" Property="Grid.RowSpan" Value="2"/>
                            <Setter TargetName="HeaderBackground" Property="CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=tpf:TaskBoardColumn}}"/>
                            <Setter TargetName="HeaderPresenter" Property="ContentTemplate" Value="{Binding CollapsedHeaderTemplate, RelativeSource={RelativeSource AncestorType=tpf:TaskBoardColumn}}"/>
                            <Setter TargetName="HeaderPresenter" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="HeaderPresenter" Property="Margin" Value="4 8"/>
                            <Setter TargetName="HeaderPresenter" Property="VerticalAlignment" Value="Top"/>
                            <Setter TargetName="HeaderPresenter" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="HeaderPresenter" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="270"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TaskBoardColumn" BasedOn="{StaticResource TPF.TaskBoardColumnStyle}"/>
    <!-- ========== TaskBoard ========== -->
    <Style TargetType="tpf:TaskBoard" x:Key="TPF.TaskBoardStyle">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="HeaderForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="ItemTemplate" Value="{StaticResource TPF.TaskBoardItemCardTemplate}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HeaderPadding" Value="5"/>
        <Setter Property="MinimumCardHeight" Value="70"/>
        <Setter Property="MaximumCardHeight" Value="140"/>
        <Setter Property="DropVisualProvider">
            <Setter.Value>
                <behaviors:HorizontalLineDropVisualProvider Fill="{tpf:ResourceLink Key=AccentBrush}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:TaskBoard">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Border Grid.Row="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0 0 0 1" Background="{TemplateBinding HeaderBackground}" Visibility="{TemplateBinding HeaderVisibility}">
                                <ContentPresenter ContentSource="Header" TextBlock.TextAlignment="{TemplateBinding HeaderTextAlignment}" Margin="{TemplateBinding HeaderPadding}" TextElement.Foreground="{TemplateBinding HeaderForeground}"/>
                            </Border>

                            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Auto" BorderThickness="0" Background="Transparent" Padding="{TemplateBinding Padding}">
                                <ItemsControl x:Name="PART_ColumnsControl" ItemsSource="{TemplateBinding Columns}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <taskboard:TaskBoardColumnsPanel/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TaskBoard" BasedOn="{StaticResource TPF.TaskBoardStyle}"/>

    <!-- ========== TabControl ========== -->
    <Style TargetType="tabControl:TabControlDropdownItem" x:Key="TPF.TabControlDropdownItemStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="5 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tabControl:TabControlDropdownItem">
                    <Border x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <ContentPresenter x:Name="Content" Grid.Column="0" Content="{Binding Header}"/>

                            <tpf:SimplePanel x:Name="ButtonPanel" Grid.Column="1" Visibility="Hidden">
                                <Button x:Name="CloseButton" Style="{StaticResource WPF.ChromelessButtonStyle}" Height="16" Width="16" Visibility="Collapsed" Margin="5 0 0 0"
                                        Command="{x:Static tpf:TabItemCommands.Close}" CommandTarget="{Binding }">
                                    <Path x:Name="CloseGlyph" Data="M 1,0 L 5,4 9,0 10,1 6,5 10,9 9,10 5,6 1,10 0,9 4,5 0,1 z" Width="10" Height="10" Fill="{tpf:ResourceLink Key=GlyphBrush}"/>
                                </Button>
                            </tpf:SimplePanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Root" Property="Background" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter TargetName="ButtonPanel" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger SourceName="CloseButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="CloseGlyph" Property="Fill" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding ShowCloseButton}" Value="True">
                            <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsEnabled}" Value="False">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tabControl:TabControlDropdownItem" BasedOn="{StaticResource TPF.TabControlDropdownItemStyle}"/>
    <Style TargetType="ButtonBase" x:Key="TPF.TabControlButtonStyle">
        <Setter Property="Height" Value="16"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="Content" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TabControl" x:Key="TPF.TabControlStyle">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HeaderBackground" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=HeaderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:TabControl">
                    <Grid x:Name="RootGrid" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>

                        <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0"
                                      HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Style="{StaticResource WPF.TabControlScrollViewerStyle}">
                            <TabPanel x:Name="PART_TabPanel" IsItemsHost="True" Background="{TemplateBinding HeaderBackground}" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        </ScrollViewer>

                        <StackPanel x:Name="ButtonsPanel" Grid.Row="0" Grid.Column="1" Orientation="Horizontal">
                            <Button x:Name="PART_AddButton" Style="{StaticResource TPF.TabControlButtonStyle}" ContentTemplate="{TemplateBinding AddButtonContentTemplate}" Visibility="Collapsed">
                                <Path Data="M0,3 L3,3 3,0 4,0 4,3 7,3 7,4 4,4 4,7 3,7 3,4 0,4 z" Fill="{Binding (TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"/>
                            </Button>
                            <ToggleButton x:Name="DropDownButton" Style="{StaticResource TPF.TabControlButtonStyle}" ContentTemplate="{TemplateBinding DropDownButtonContentTemplate}" Visibility="Collapsed"
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Path Data="M0,0 L9,0 4.5,5 z" Fill="{Binding (TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"/>
                            </ToggleButton>
                            <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=DropDownButton}" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False">
                                <Border Background="{tpf:ResourceLink Key=PrimaryBrush}" BorderBrush="{tpf:ResourceLink Key=BorderBrush}" BorderThickness="1">
                                    <ItemsControl x:Name="PART_DropDownItemsPresenter"/>
                                </Border>
                            </Popup>
                        </StackPanel>

                        <Border x:Name="ContentPanel" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="PART_ScrollViewer" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ButtonsPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="PART_ScrollViewer" Value="0 0 0 2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="PART_ScrollViewer" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ButtonsPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="ContentPanel" Value="2"/>
                            <Setter Property="Grid.Column" TargetName="PART_ScrollViewer" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ButtonsPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="*"/>
                            <Setter Property="Margin" TargetName="PART_ScrollViewer" Value="0 0 0 0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="PART_ScrollViewer" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ButtonsPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="ContentPanel" Value="2"/>
                            <Setter Property="Grid.Column" TargetName="PART_ScrollViewer" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ButtonsPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="*"/>
                            <Setter Property="Margin" TargetName="PART_ScrollViewer" Value="0 0 0 0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="RootGrid" Value="{tpf:ResourceLink Key=DisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="ShowAddButton" Value="True">
                            <Setter Property="Visibility" TargetName="PART_AddButton" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShowDropDownButton" Value="True">
                            <Setter Property="Visibility" TargetName="DropDownButton" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TabControl" BasedOn="{StaticResource TPF.TabControlStyle}"/>

    <!-- ========== TabItem ========== -->
    <Style TargetType="Button" x:Key="TPF.TabItemHeaderButton">
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Margin" Value="0 0 2 0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="Content" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=MouseOverTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{tpf:ResourceLink Key=PressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=PressedAccentBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="Content" Value="{tpf:ResourceLink Key=PressedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Content" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{tpf:ResourceLink Key=MouseOverAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TabItem" x:Key="TPF.TabItemStyle">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HeaderForeground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Padding" Value="8 2"/>
        <Setter Property="IconMargin" Value="5 0 0 0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:TabItem">
                    <Border x:Name="PART_Root" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding Background}" ToolTip="{TemplateBinding HeaderToolTip}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <ContentPresenter x:Name="IconPresenter" Grid.Column="0" Content="{TemplateBinding Icon}" Margin="{TemplateBinding IconMargin}"/>

                            <ContentPresenter x:Name="HeaderContent" Grid.Column="1" ContentSource="Header" TextBlock.Foreground="{TemplateBinding HeaderForeground}" Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                            <Button x:Name="PinButton" Grid.Column="2" Style="{StaticResource TPF.TabItemHeaderButton}" Command="{x:Static tpf:TabItemCommands.TogglePin}"
                                    IsTabStop="False" SnapsToDevicePixels="True" Visibility="Collapsed" Focusable="False">
                                <Path x:Name="PinGlyph" Data="M5.8,0 L6,0 6,2 18,2 18,10 6,10 6,12 5.8,12 5.8,6.5 0,6.5 0,5.5 5.8,5.5 z M6,2.2 17.8,2.2 17.8,7 6,7 z" Width="10" Height="10" Stretch="Uniform"
                                      Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"
                                      Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                            </Button>

                            <Button x:Name="CloseButton" Grid.Column="3" Style="{StaticResource TPF.TabItemHeaderButton}" Command="{x:Static tpf:TabItemCommands.Close}"
                                    IsTabStop="False" SnapsToDevicePixels="True" Visibility="Collapsed">
                                <Path Data="M 1,0 L 5,4 9,0 10,1 6,5 10,9 9,10 5,6 1,10 0,9 4,5 0,1 z" Width="10" Height="10" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                            </Button>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HeaderContent" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="PART_Root" Property="Background" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
                            <Setter TargetName="HeaderContent" Property="TextBlock.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                            <Setter TargetName="CloseButton" Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                            <Setter TargetName="PinButton" Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ShowCloseButton" Value="True">
                            <Setter TargetName="CloseButton" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="ShowPinButton" Value="True">
                            <Setter TargetName="PinButton" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsPinned" Value="True">
                            <Setter TargetName="PinGlyph" Property="Data" Value="M2,0 L10,0 10,12 12,12 12,12.2 6.5,12.2 6.5,18 5.5,18 5.5,12.2 0,12.2 0,12 2,12 z M2.2,0.2 L7,0.2 7,12 2.2,12 z"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowCloseButton" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowCloseButton" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowPinButton" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PinButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowPinButton" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PinButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowPinButton" Value="True"/>
                                <Condition Property="IsPinned" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PinButton" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PART_Root" Property="Background" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                                <Setter TargetName="HeaderContent" Property="TextBlock.Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                                <Setter TargetName="CloseButton" Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                                <Setter TargetName="PinButton" Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:TabItem" BasedOn="{StaticResource TPF.TabItemStyle}"/>

    <!-- ========== Rating ========== -->
    <PathGeometry x:Key="StarGeometry" Figures="M0,5 L4.5,5 6.5,0 8.5,5 13,5 9,8 11,13 6.5,10 2,13 4,8 z"/>
    <Style TargetType="tpf:Rating" x:Key="TPF.RatingStyle">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Geometry" Value="{StaticResource StarGeometry}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Rating">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Rating" BasedOn="{StaticResource TPF.RatingStyle}"/>
    <!-- ========== RatingItem ========== -->
    <Style TargetType="tpf:RatingItem" x:Key="TPF.RatingItemStyle">
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="SelectedBackground" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
        <Setter Property="SelectedBorderBrush" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:RatingItem">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <tpf:SimplePanel Margin="{TemplateBinding Padding}" Background="Transparent">
                            <Path Data="{TemplateBinding Geometry}" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"
                                  Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Stretch" StrokeLineJoin="Round"/>
                            <tpf:Clipper VisibleRatio="{TemplateBinding Value}" ClippingDirection="Right" HorizontalContentAlignment="Center">
                                <Path Data="{TemplateBinding Geometry}" Fill="{x:Null}" Stroke="{TemplateBinding SelectedBorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"
                                      Stretch="Uniform" VerticalAlignment="Stretch" StrokeLineJoin="Round"/>
                            </tpf:Clipper>
                            <tpf:Clipper VisibleRatio="{TemplateBinding VisibleValue}" ClippingDirection="Right" HorizontalContentAlignment="Center">
                                <Path Data="{TemplateBinding Geometry}" Fill="{TemplateBinding SelectedBackground}" Stroke="{TemplateBinding SelectedBorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"
                                      Stretch="Uniform" VerticalAlignment="Stretch" StrokeLineJoin="Round"/>
                            </tpf:Clipper>
                        </tpf:SimplePanel>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" Grid.Row="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:RatingItem" BasedOn="{StaticResource TPF.RatingItemStyle}"/>

    <!-- ========== Poptip ========== -->
    <Style TargetType="tpf:Poptip" x:Key="TPF.PoptipStyle">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Offset" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Poptip">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                        <ContentPresenter ContentSource="Content" TextElement.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Poptip" BasedOn="{StaticResource TPF.PoptipStyle}"/>

    <!-- ========== DialogHost ========== -->
    <Style TargetType="tpf:DialogHost" x:Key="TPF.DialogHostStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="DialogMargin" Value="30"/>
        <Setter Property="DialogBackground" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="DialogBorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="DialogBorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:DialogHost">
                    <tpf:SimplePanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="DialogStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Closed" To="Open">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DialogPanel" Storyboard.TargetProperty="Visibility" Duration="0">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayPanel" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0"/>
                                                <EasingDoubleKeyFrame Value="0.4" KeyTime="0:0:0.3" EasingFunction="{animation:SineEase EasingMode=EaseInOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DialogScaleTransform" Storyboard.TargetProperty="ScaleX">
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0"/>
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.3" EasingFunction="{animation:SineEase EasingMode=EaseInOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DialogScaleTransform" Storyboard.TargetProperty="ScaleY">
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0"/>
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.3" EasingFunction="{animation:SineEase EasingMode=EaseInOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>

                                    <VisualTransition From="Open" To="Closed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DialogPanel" Storyboard.TargetProperty="Visibility" Duration="0">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Collapsed</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayPanel" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame Value="0.4" KeyTime="0"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.3" EasingFunction="{animation:SineEase EasingMode=EaseInOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DialogScaleTransform" Storyboard.TargetProperty="ScaleX">
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.3" EasingFunction="{animation:SineEase EasingMode=EaseInOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DialogScaleTransform" Storyboard.TargetProperty="ScaleY">
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0"/>
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.3" EasingFunction="{animation:SineEase EasingMode=EaseInOut}"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Open">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DialogPanel" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="DialogScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0" To="1"/>
                                        <DoubleAnimation Storyboard.TargetName="DialogScaleTransform" Storyboard.TargetProperty="ScaleY" Duration="0" To="1"/>
                                        <DoubleAnimation Storyboard.TargetName="OverlayPanel" Storyboard.TargetProperty="Opacity" Duration="0" To="0.4"/>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Closed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DialogPanel" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="OverlayPanel" Storyboard.TargetProperty="Opacity" Duration="0" To="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter/>

                        <tpf:SimplePanel x:Name="OverlayPanel" Background="{TemplateBinding OverlayBackground}" Opacity="0" IsHitTestVisible="False" Focusable="False"/>

                        <tpf:SimplePanel x:Name="DialogPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Margin="{TemplateBinding DialogMargin}" Visibility="Collapsed" RenderTransformOrigin="0.5,0.5">
                            <tpf:Shadow Background="{TemplateBinding DialogBackground}" ShadowDepth="Depth3" CornerRadius="{TemplateBinding DialogCornerRadius}"/>
                            <Border Background="{TemplateBinding DialogBackground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding DialogCornerRadius}">
                                <ContentPresenter x:Name="PART_DialogContentElement" ContentSource="DialogContent"/>
                            </Border>
                            <tpf:SimplePanel.RenderTransform>
                                <ScaleTransform x:Name="DialogScaleTransform" ScaleX="0" ScaleY="0"/>
                            </tpf:SimplePanel.RenderTransform>
                        </tpf:SimplePanel>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDialogOpen" Value="True">
                            <Setter TargetName="OverlayPanel" Property="IsHitTestVisible" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:DialogHost" BasedOn="{StaticResource TPF.DialogHostStyle}"/>

    <!-- ========== TitleBar ========== -->
    <Style TargetType="Button" x:Key="TPF.TitleBarButtonStyle">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <tpf:SimplePanel>
                        <Rectangle x:Name="Background" Fill="{TemplateBinding Background}"/>
                        <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}"/>
                    </tpf:SimplePanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="{tpf:ResourceLink Key=DisabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Background" Property="Fill" Value="{tpf:ResourceLink Key=MouseOverBrush}"/>
                            <Setter TargetName="Background" Property="Opacity" Value="0.4"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Background" Property="Fill" Value="{tpf:ResourceLink Key=AccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:WindowTitleBar" x:Key="TPF.WindowTitleBarStyle">
        <Setter Property="Height" Value="26"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=HeaderBrush}"/>
        <Setter Property="IconMargin" Value="8 0 0 0"/>
        <Setter Property="TitleMargin" Value="5 0"/>
        <Setter Property="ButtonsAreaMargin" Value="0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinimizeButtonStyle" Value="{StaticResource TPF.TitleBarButtonStyle}"/>
        <Setter Property="MaximizeButtonStyle" Value="{StaticResource TPF.TitleBarButtonStyle}"/>
        <Setter Property="RestoreButtonStyle" Value="{StaticResource TPF.TitleBarButtonStyle}"/>
        <Setter Property="CloseButtonStyle" Value="{StaticResource TPF.TitleBarButtonStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:WindowTitleBar">
                    <Border x:Name="Root" Background="{TemplateBinding Background}" BorderThickness="0" CornerRadius="{TemplateBinding CornerRadius}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Image x:Name="Icon" Grid.Column="0" Height="16" Width="16" VerticalAlignment="Center" Source="{TemplateBinding Icon}"/>

                            <ContentPresenter x:Name="LeftExtraContent" ContentSource="LeftExtraTitleContent" Grid.Column="1"/>

                            <TextBlock x:Name="Title" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding TitleAlignment}" Margin="{TemplateBinding TitleMargin}"
                                       Text="{TemplateBinding Title}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding TitleFontSize}" FontFamily="{TemplateBinding TitleFontFamily}" TextTrimming="CharacterEllipsis"/>

                            <ContentPresenter x:Name="RightExtraContent" ContentSource="RightExtraTitleContent" Grid.Column="3"/>

                            <StackPanel x:Name="ButtonsPanel" Grid.Column="4" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="{TemplateBinding ButtonsAreaMargin}">
                                <Button x:Name="MinimizeButton" Command="{x:Static tpf:ChromelessWindow.MinimizeWindow}" Style="{TemplateBinding MinimizeButtonStyle}" Height="{TemplateBinding Height}">
                                    <Button.Content>
                                        <Path Data="M 0,0 L 10,0 10,2 0,2 z" Height="2" Width="10" Margin="0 6 0 0" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                    </Button.Content>
                                </Button>
                                <Button x:Name="MaximizeButton" Command="{x:Static tpf:ChromelessWindow.MaximizeWindow}" Style="{TemplateBinding MaximizeButtonStyle}" Height="{TemplateBinding Height}">
                                    <Button.Content>
                                        <Path Data="M 0,0 L 10,0 10,10 0,10 M 1,3 L 9,3 9,9 1,9 z" Width="10" Height="10" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                    </Button.Content>
                                </Button>
                                <Button x:Name="RestoreButton" Command="{x:Static tpf:ChromelessWindow.RestoreWindow}" Style="{TemplateBinding RestoreButtonStyle}" Height="{TemplateBinding Height}" Visibility="Collapsed">
                                    <Button.Content>
                                        <Path Data="M 1,5 L 1,9 7,9 7,5 M 3,2 L 3,3 8,3 8,6 9,6 9,2 M 2,0 L 10,0 10,7 8,7 8,10 0,10 0,3 2,3 z" Width="10" Height="10" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                    </Button.Content>
                                </Button>
                                <Button x:Name="CloseButton" Command="{x:Static tpf:ChromelessWindow.CloseWindow}" Style="{TemplateBinding CloseButtonStyle}" Height="{TemplateBinding Height}">
                                    <Button.Content>
                                        <Path Data="M 1,0 L 5,4 9,0 10,1 6,5 10,9 9,10 5,6 1,10 0,9 4,5 0,1 z" Width="10" Height="10" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                    </Button.Content>
                                </Button>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ShowIcon" Value="False">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ShowTitle" Value="False">
                            <Setter TargetName="Title" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ShowMinimizeButton" Value="False">
                            <Setter TargetName="MinimizeButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ShowMaximizeButton" Value="False">
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RestoreButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RestoreButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Root" Property="CornerRadius" Value="0"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="MaximizeButton" Property="IsEnabled" Value="False"/>
                            <Setter TargetName="RestoreButton" Property="IsEnabled" Value="False"/>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="MinimizeButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RestoreButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ExtendContentAreaIntoTitleBar" Value="True">
                            <Setter TargetName="Root" Property="Background" Value="{x:Null}"/>
                            <Setter TargetName="Root" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="MinimizeButton" Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
                            <Setter TargetName="MaximizeButton" Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
                            <Setter TargetName="RestoreButton" Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
                            <Setter TargetName="CloseButton" Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Title" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="LeftExtraContent" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RightExtraContent" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:WindowTitleBar" BasedOn="{StaticResource TPF.WindowTitleBarStyle}"/>

    <!-- ========== Window ========== -->
    <Style TargetType="tpf:ChromelessWindow" x:Key="TPF.ChromelessWindowStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IconMargin" Value="8 0 0 0"/>
        <Setter Property="TitleMargin" Value="5 0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="TitleBarHeight" Value="26"/>
        <Setter Property="TitleBarForeground" Value="{tpf:ResourceLink Key=SelectedTextBrush}"/>
        <Setter Property="TitleBarBackground" Value="{tpf:ResourceLink Key=HeaderBrush}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=ApplicationBackground}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderBrushWhenActive" Value="{tpf:ResourceLink Key=FocusedAccentBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinimizeButtonStyle" Value="{StaticResource TPF.TitleBarButtonStyle}"/>
        <Setter Property="MaximizeButtonStyle" Value="{StaticResource TPF.TitleBarButtonStyle}"/>
        <Setter Property="RestoreButtonStyle" Value="{StaticResource TPF.TitleBarButtonStyle}"/>
        <Setter Property="CloseButtonStyle" Value="{StaticResource TPF.TitleBarButtonStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ChromelessWindow">
                    <Border x:Name="RootElement" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="0">
                        <AdornerDecorator>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Border x:Name="WindowBorder" Grid.RowSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>

                                <ContentPresenter x:Name="Content" Grid.Row="1" Margin="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessToSpecificThicknessConverter}, ConverterParameter=#\,0\,#\,#}"/>

                                <tpf:WindowTitleBar x:Name="PART_TitleBar" Grid.Row="0"/>
                            </Grid>
                        </AdornerDecorator>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="True">
                            <Setter TargetName="WindowBorder" Property="BorderBrush" Value="{Binding BorderBrushWhenActive, RelativeSource={RelativeSource AncestorType=tpf:ChromelessWindow}}"/>
                        </Trigger>
                        <Trigger Property="ExtendContentAreaIntoTitleBar" Value="True">
                            <Setter TargetName="Content" Property="Grid.RowSpan" Value="2"/>
                            <Setter TargetName="Content" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="Content" Property="Margin" Value="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType=tpf:ChromelessWindow}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ChromelessWindow" BasedOn="{StaticResource TPF.ChromelessWindowStyle}"/>

    <!-- ========== Widget ========== -->
    <Style TargetType="tpf:Widget" x:Key="TPF.WidgetStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="{tpf:ResourceLink Key=PrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Widget">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <ContentPresenter ContentSource="Header" Grid.Row="0" HorizontalAlignment="{TemplateBinding HeaderAlignment}"/>

                            <ContentPresenter ContentSource="Content" Grid.Row="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Widget" BasedOn="{StaticResource TPF.WidgetStyle}"/>

    <!-- ========== Dashboard ========== -->
    <Style TargetType="tpf:Dashboard" x:Key="TPF.DashboardStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="DropVisualProvider">
            <Setter.Value>
                <dashboard:DashboardDropVisualProvider Stroke="{tpf:ResourceLink Key=AccentBrush}" Fill="{tpf:ResourceLink Key=AccentBrush}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:Dashboard">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <ContentPresenter ContentSource="Header" Grid.Row="0"/>

                            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" BorderThickness="0" Background="Transparent" Padding="{TemplateBinding Padding}">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:Dashboard" BasedOn="{StaticResource TPF.DashboardStyle}"/>

    <!-- ========== DataBar ========== -->
    <Style TargetType="Rectangle" x:Key="TPF.DataBarOriginAxisStyle">
        <Setter Property="Width" Value="1"/>
    </Style>
    <Style TargetType="tpf:DataBar" x:Key="TPF.DataBarStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{tpf:ResourceLink Key=TextBrush}"/>
        <Setter Property="PositiveValueBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="NegativeValueBrush" Value="{tpf:ResourceLink Key=ErrorBrush}"/>
        <Setter Property="OriginAxisBrush" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="OriginAxisStyle" Value="{StaticResource TPF.DataBarOriginAxisStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:DataBar">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <tpf:SimplePanel>
                            <databar:DataBarShape x:Name="PART_BarShape" Style="{TemplateBinding BarStyle}" HeightFactor="{TemplateBinding BarHeightFactor}" Fill="{TemplateBinding ActualValueBrush}"
                                                  Stroke="{TemplateBinding ActualBarBorderBrush}" StrokeThickness="{TemplateBinding BarStrokeThickness}" OutOfRangeMarkerType="{TemplateBinding OutOfRangeMarkerType}"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding OutOfRangeTemplate}"/>
                            <Rectangle Margin="{TemplateBinding OriginAxisMargin}" Fill="{TemplateBinding OriginAxisBrush}" Visibility="{TemplateBinding OriginAxisVisibility}" Style="{TemplateBinding OriginAxisStyle}"
                                       HorizontalAlignment="Left"/>
                            <TextBlock Text="{TemplateBinding LabelText}" Margin="{TemplateBinding LabelMargin}" Style="{TemplateBinding LabelStyle}" Visibility="{TemplateBinding LabelVisibility}" VerticalAlignment="Center"/>
                        </tpf:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:DataBar" BasedOn="{StaticResource TPF.DataBarStyle}"/>
    <!-- ========== StackedDataBar ========== -->
    <Style TargetType="tpf:StackedDataBar" x:Key="TPF.StackedDataBarStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="OriginAxisBrush" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="OriginAxisStyle" Value="{StaticResource TPF.DataBarOriginAxisStyle}"/>
        <Setter Property="BarBrushes" Value="{StaticResource BlueBrushCollection}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:StackedDataBar">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <tpf:SimplePanel>
                            <databar:StackedDataBarItemsPresenter x:Name="PART_ItemsPresenter" BarHeightFactor="{TemplateBinding BarHeightFactor}" BarStrokeThickness="{TemplateBinding BarStrokeThickness}"
                                                                  BarStyle="{TemplateBinding BarStyle}" BarBrushes="{TemplateBinding BarBrushes}" BarBorderBrushes="{TemplateBinding BarBorderBrushes}"
                                                                  ToolTipTemplate="{TemplateBinding ToolTipTemplate}" IsTabStop="False"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding AppliedOverflowTemplate}"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding AppliedUnderflowTemplate}"/>
                            <Rectangle Margin="{TemplateBinding OriginAxisMargin}" Fill="{TemplateBinding OriginAxisBrush}" Visibility="{TemplateBinding OriginAxisVisibility}" Style="{TemplateBinding OriginAxisStyle}"
                                       HorizontalAlignment="Left"/>
                        </tpf:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:StackedDataBar" BasedOn="{StaticResource TPF.StackedDataBarStyle}"/>
    <Style TargetType="databar:StackedDataBarItem" x:Key="TPF.StackedDataBarItemStyle">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="databar:StackedDataBarItem">
                    <databar:DataBarShape x:Name="PART_BarShape" Style="{TemplateBinding BarStyle}" HeightFactor="{TemplateBinding BarHeightFactor}" Fill="{TemplateBinding Background}"
                                          Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BarStrokeThickness}" 
                                          Start="{TemplateBinding Start}" End="{TemplateBinding End}" ToolTipService.IsEnabled="{TemplateBinding ToolTipTemplate, Converter={StaticResource NullToBooleanConverter}}">
                        <databar:DataBarShape.ToolTip>
                            <ToolTip DataContext="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}" Content="{Binding }" ContentTemplate="{TemplateBinding ToolTipTemplate}"/>
                        </databar:DataBarShape.ToolTip>
                    </databar:DataBarShape>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="databar:StackedDataBarItem" BasedOn="{StaticResource TPF.StackedDataBarItemStyle}"/>
    <Style TargetType="databar:StackedDataBarItemsPresenter" x:Key="TPF.StackedDataBarItemsPresenterStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="databar:StackedDataBarItemsPresenter">
                    <Border x:Name="PART_Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="databar:StackedDataBarItemsPresenter" BasedOn="{StaticResource TPF.StackedDataBarItemsPresenterStyle}"/>
    <!-- ========== StackedFullDataBar ========== -->
    <Style TargetType="tpf:StackedFullDataBar" x:Key="TPF.StackedFullDataBarStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BarBrushes" Value="{StaticResource BlueBrushCollection}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:StackedFullDataBar">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <databar:StackedDataBarItemsPresenter x:Name="PART_ItemsPresenter" BarHeightFactor="{TemplateBinding BarHeightFactor}" BarStrokeThickness="{TemplateBinding BarStrokeThickness}"
                                                              BarStyle="{TemplateBinding BarStyle}" BarBrushes="{TemplateBinding BarBrushes}" BarBorderBrushes="{TemplateBinding BarBorderBrushes}"
                                                              ToolTipTemplate="{TemplateBinding ToolTipTemplate}" IsTabStop="False"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:StackedFullDataBar" BasedOn="{StaticResource TPF.StackedFullDataBarStyle}"/>

    <!-- ========== DataAxis ========== -->
    <Style TargetType="tpf:DataAxis" x:Key="TPF.DataAxisStyle">
        <Setter Property="TickBrush" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:DataAxis">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="1"/>
                        </Grid.ColumnDefinitions>

                        <Rectangle x:Name="Line" Height="1" Fill="{TemplateBinding TickBrush}" Grid.Row="0" Grid.ColumnSpan="3"/>
                        <dataaxis:DataAxisTicksControl x:Name="Ticks" Grid.Row="1" Grid.ColumnSpan="3"/>
                        <dataaxis:DataAxisLabelsControl x:Name="Labels" Grid.Row="2" Grid.ColumnSpan="3"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="Line" Property="Height" Value="NaN"/>
                            <Setter TargetName="Line" Property="Width" Value="1"/>
                            <Setter TargetName="Line" Property="Grid.Column" Value="2"/>
                            <Setter TargetName="Line" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="Line" Property="Grid.RowSpan" Value="3"/>
                            <Setter TargetName="Line" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="Ticks" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="Ticks" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="Ticks" Property="Grid.RowSpan" Value="3"/>
                            <Setter TargetName="Labels" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="Labels" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="Labels" Property="Grid.RowSpan" Value="3"/>
                            <Setter TargetName="Labels" Property="Margin" Value="0 0 2 0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:DataAxis" BasedOn="{StaticResource TPF.DataAxisStyle}"/>
    <Style TargetType="dataaxis:DataAxisLabelsControl" x:Key="TPF.DataAxisLabelsControlStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dataaxis:DataAxisLabelsControl">
                    <Border x:Name="PART_Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="dataaxis:DataAxisLabelsControl" BasedOn="{StaticResource TPF.DataAxisLabelsControlStyle}"/>

    <!-- ========== LinearSparkline ========== -->
    <Style TargetType="tpf:LinearSparkline" x:Key="TPF.LinearSparklineStyle">
        <Setter Property="AxisBrush" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="LineBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="NormalRangeBrush" Value="{tpf:ResourceLink Key=BorderBrush}"/>
        <Setter Property="IndicatorBrush" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
        <Setter Property="FirstPointBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="LastPointBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="HighPointBrush" Value="ForestGreen"/>
        <Setter Property="LowPointBrush" Value="Red"/>
        <Setter Property="NegativePointBrush" Value="Crimson"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:LinearSparkline">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <tpf:SimplePanel>
                            <Path x:Name="PART_NormalRange" Fill="{TemplateBinding NormalRangeBrush}"/>
                            <Polyline Stroke="{TemplateBinding LineBrush}" Points="{TemplateBinding LinePoints}" Style="{TemplateBinding LineStyle}"/>
                            <Line x:Name="PART_Axis" Stroke="{TemplateBinding AxisBrush}" StrokeThickness="1"/>
                            <sparkline:IndicatorPanel x:Name="PART_IndicatorPanel"/>
                        </tpf:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:LinearSparkline" BasedOn="{StaticResource TPF.LinearSparklineStyle}"/>
    <Style TargetType="sparkline:IndicatorItem" x:Key="TPF.SparklineIndicatorItemStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="sparkline:IndicatorItem">
                    <Ellipse Fill="{TemplateBinding Background}" Width="5" Height="5" ToolTipService.IsEnabled="{TemplateBinding ToolTipTemplate, Converter={StaticResource NullToBooleanConverter}}">
                        <Ellipse.ToolTip>
                            <ToolTip DataContext="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}" Content="{Binding }" ContentTemplate="{TemplateBinding ToolTipTemplate}"/>
                        </Ellipse.ToolTip>
                    </Ellipse>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="sparkline:IndicatorItem" BasedOn="{StaticResource TPF.SparklineIndicatorItemStyle}"/>

    <!-- ========== AreaSparkline ========== -->
    <Style TargetType="tpf:AreaSparkline" x:Key="TPF.AreaSparklineStyle">
        <Setter Property="AxisBrush" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="LineBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="PositiveAreaBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="NegativeAreaBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="IndicatorBrush" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
        <Setter Property="FirstPointBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="LastPointBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="HighPointBrush" Value="ForestGreen"/>
        <Setter Property="LowPointBrush" Value="Red"/>
        <Setter Property="NegativePointBrush" Value="Crimson"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:AreaSparkline">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <tpf:SimplePanel>
                            <Polyline Fill="{TemplateBinding PositiveAreaBrush}" Points="{TemplateBinding AreaPoints}" Style="{TemplateBinding PositiveAreaStyle}" Clip="{TemplateBinding PositiveAreaClip}"/>
                            <Polyline Fill="{TemplateBinding NegativeAreaBrush}" Points="{TemplateBinding AreaPoints}" Style="{TemplateBinding NegativeAreaStyle}" Clip="{TemplateBinding NegativeAreaClip}"/>
                            <Polyline Stroke="{TemplateBinding LineBrush}" Points="{TemplateBinding LinePoints}" Style="{TemplateBinding LineStyle}"/>
                            <Line x:Name="PART_Axis" Stroke="{TemplateBinding AxisBrush}" StrokeThickness="1"/>
                            <sparkline:IndicatorPanel x:Name="PART_IndicatorPanel"/>
                        </tpf:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:AreaSparkline" BasedOn="{StaticResource TPF.AreaSparklineStyle}"/>

    <!-- ========== ColumnSparkline ========== -->
    <Style TargetType="tpf:ColumnSparkline" x:Key="TPF.ColumnSparklineStyle">
        <Setter Property="AxisBrush" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="ColumnBrush" Value="{tpf:ResourceLink Key=SelectedBrush}"/>
        <Setter Property="FirstPointBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="LastPointBrush" Value="{tpf:ResourceLink Key=AccentBrush}"/>
        <Setter Property="HighPointBrush" Value="ForestGreen"/>
        <Setter Property="LowPointBrush" Value="Red"/>
        <Setter Property="NegativePointBrush" Value="Crimson"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tpf:ColumnSparkline">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <tpf:SimplePanel>
                            <Line x:Name="PART_Axis" Stroke="{TemplateBinding AxisBrush}" StrokeThickness="1"/>
                            <sparkline:ColumnsPanel x:Name="PART_ColumnsPanel" ColumnWidthFactor="{TemplateBinding ColumnWidthFactor}"/>
                        </tpf:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="tpf:ColumnSparkline" BasedOn="{StaticResource TPF.ColumnSparklineStyle}"/>
    <Style TargetType="sparkline:ColumnItem" x:Key="TPF.SparklineColumnItemStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="sparkline:ColumnItem">
                    <Rectangle Fill="{TemplateBinding Background}" ToolTipService.IsEnabled="{TemplateBinding ToolTipTemplate, Converter={StaticResource NullToBooleanConverter}}">
                        <Rectangle.ToolTip>
                            <ToolTip DataContext="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}" Content="{Binding }" ContentTemplate="{TemplateBinding ToolTipTemplate}"/>
                        </Rectangle.ToolTip>
                    </Rectangle>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="sparkline:ColumnItem" BasedOn="{StaticResource TPF.SparklineColumnItemStyle}"/>

    <!-- ========== WinLossSparkline ========== -->
    <Style TargetType="tpf:WinLossSparkline" BasedOn="{StaticResource TPF.ColumnSparklineStyle}" x:Key="TPF.WinLossSparklineStyle">
        <Setter Property="NeutralPointBrush" Value="{tpf:ResourceLink Key=GlyphBrush}"/>
        <Setter Property="ShowNegativePointIndicators" Value="True"/>
    </Style>
    <Style TargetType="tpf:WinLossSparkline" BasedOn="{StaticResource TPF.WinLossSparklineStyle}"/>
</ResourceDictionary>